[{"path":"/home/u146242/symv_lab/s10/a.cl", "name":"a.cl", "has_active_debug_locs":false, "absName":"/home/u146242/symv_lab/s10/a.cl", "content":"/*OpenCL C x86-64-linux-avx-avx2-enable_synthesis-f16c-fma-intel_fpga-opencl-sse41*/\u000A#pragma OPENCL FP_CONTRACT ON\u000A#define float_from_bits(x) as_float(x)\u000Ainline float nan_f32() { return NAN; }\u000Ainline float neg_inf_f32() { return -INFINITY; }\u000Ainline float inf_f32() { return INFINITY; }\u000Ainline bool is_nan_f32(float x) {return isnan(x); }\u000Ainline bool is_inf_f32(float x) {return isinf(x); }\u000Ainline bool is_finite_f32(float x) {return isfinite(x); }\u000A#define sqrt_f32 sqrt \u000A#define sin_f32 sin \u000A#define cos_f32 cos \u000A#define exp_f32 exp \u000A#define log_f32 log \u000A#define abs_f32 fabs \u000A#define floor_f32 floor \u000A#define ceil_f32 ceil \u000A#define round_f32 round \u000A#define trunc_f32 trunc \u000A#define pow_f32 pow\u000A#define asin_f32 asin \u000A#define acos_f32 acos \u000A#define tan_f32 tan \u000A#define atan_f32 atan \u000A#define atan2_f32 atan2\u000A#define sinh_f32 sinh \u000A#define asinh_f32 asinh \u000A#define cosh_f32 cosh \u000A#define acosh_f32 acosh \u000A#define tanh_f32 tanh \u000A#define atanh_f32 atanh \u000A#define fast_inverse_f32 native_recip \u000A#define fast_inverse_sqrt_f32 native_rsqrt \u000A#define __address_space___shared __local\u000A\u000A\u000A// ll suffix in OpenCL is reserved for 128-bit integers.\u000A#if defined __OPENCL_VERSION__\u000A#define ADD_INT64_T_SUFFIX(x) x##l\u000A#define ADD_UINT64_T_SUFFIX(x) x##ul\u000A// HLSL doesn't have any suffixes.\u000A#elif defined HLSL_VERSION\u000A#define ADD_INT64_T_SUFFIX(x) x\u000A#define ADD_UINT64_T_SUFFIX(x) x\u000A#else\u000A#define ADD_INT64_T_SUFFIX(x) x##ll\u000A#define ADD_UINT64_T_SUFFIX(x) x##ull\u000A#endif\u000A#pragma OPENCL EXTENSION cl_intel_channels : enable\u000Atypedef union {\u000Afloat16 v[4];\u000Afloat s[64];\u000A} _ALoader_channel_array_t;\u000Achannel _ALoader_channel_array_t _ALoader_channel __attribute__((depth(256))) ;\u000Achannel float _XLoader_channel __attribute__((depth(256))) ;\u000Achannel float _XFeeder_channel __attribute__((depth(256))) ;\u000Atypedef struct { float s[64]; } _V_channel_array_t;\u000Achannel _V_channel_array_t _V_channel __attribute__((depth(256))) ;\u000A\u000Achannel _ALoader_channel_array_t _ALoader_T_channel __attribute__((depth(256))) ;\u000Atypedef struct { float s[64]; } _AFeeder_T_channel_array_t;\u000Achannel _AFeeder_T_channel_array_t _AFeeder_T_channel __attribute__((depth(256))) ;\u000Achannel float _XLoader_T_channel __attribute__((depth(256))) ;\u000Achannel float _XFeeder_T_channel __attribute__((depth(256))) ;\u000Achannel _V_channel_array_t _V_T_channel __attribute__((depth(256))) ;\u000A\u000A// Address spaces for kernel_ALoader\u000A#define __address_space__ASerializer __global\u000A__kernel void kernel_ALoader(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A __address_space__ASerializer const float *restrict _A_serializer_1,\u000A __address_space__ASerializer const float *restrict _A_serializer_2,\u000A __address_space__ASerializer const float *restrict _A_serializer_3,\u000A __address_space__ASerializer const float *restrict _A_serializer_4)\u000A{\u000A _ALoader_channel_array_t _ALoader_channel_array;\u000A int _addr_temp = 0;\u000A int _0 = _A_extent_1 >> 10;\u000A int _1 = _A_extent_0 >> 10;\u000A int _2 = (2 * _1 - _0 + 1) * _0 / 2;\u000A for (int _ALoader_s0_i_k = 0; _ALoader_s0_i_k < 1 + _2; _ALoader_s0_i_k++)\u000A {\u000A   #pragma loop_coalesce 2\u000A   for (int _ALoader_s0_kk = 0; _ALoader_s0_kk < 0 + 1024; _ALoader_s0_kk++)\u000A   {\u000A    for (int _ALoader_s0_ii = 0; _ALoader_s0_ii < 0 + 16; _ALoader_s0_ii++)\u000A    {\u000A     bool _3 = _ALoader_s0_i_k < _2;\u000A     if (_3)\u000A     {\u000A      int _7 = _addr_temp * 16;\u000A      _ALoader_channel_array.v[0] = vload16(0, (__address_space__ASerializer float*)(_A_serializer_1 + _7));\u000A      _ALoader_channel_array.v[1] = vload16(0, (__address_space__ASerializer float*)(_A_serializer_2 + _7));\u000A      _ALoader_channel_array.v[2] = vload16(0, (__address_space__ASerializer float*)(_A_serializer_3 + _7));\u000A      _ALoader_channel_array.v[3] = vload16(0, (__address_space__ASerializer float*)(_A_serializer_4 + _7));\u000A     } // for _ALoader_s0_iii\u000A     else\u000A     {\u000A      float _8 = float_from_bits(0 /* 0 */);\u000A      _ALoader_channel_array.v[0] = _8;\u000A      _ALoader_channel_array.v[1] = _8;\u000A      _ALoader_channel_array.v[2] = _8;\u000A      _ALoader_channel_array.v[3] = _8;\u000A     }\u000A     if (_ALoader_s0_i_k < _2)\u000A     {\u000A      write_channel_intel(_ALoader_channel, _ALoader_channel_array);\u000A     }\u000A     write_channel_intel(_ALoader_T_channel, _ALoader_channel_array);\u000A     _addr_temp += 1;\u000A    } // for _ALoader_s0_ii\u000A   } // for _ALoader_s0_kk\u000A } // for _ALoader_s0_i\u000A} // kernel kernel_ALoader\u000A#undef __address_space__ASerializer\u000A// Address spaces for kernel_XLoader\u000A#define __address_space__XSerializer_mem_channel __global\u000A__kernel void kernel_XLoader(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A __address_space__XSerializer_mem_channel const float *restrict _XSerializer_mem_channel)\u000A{\u000A int _14 = _A_extent_1 >> 10;\u000A int _15 = _14 + 1;\u000A for (int _XLoader_s0_i = 0; _XLoader_s0_i < 0 + _15; _XLoader_s0_i++)\u000A {\u000A  int _16 = _A_extent_0 >> 10;\u000A  int _17 = _16 - _XLoader_s0_i + ((_XLoader_s0_i < _14) ? 0 : 1);\u000A  for (int _XLoader_s0_k = _XLoader_s0_i; _XLoader_s0_k < _XLoader_s0_i + _17; _XLoader_s0_k++)\u000A  {\u000A   for (int _XLoader_s0_kk = 0; _XLoader_s0_kk < 0 + 1024; _XLoader_s0_kk++)\u000A   {\u000A    bool _18 = _XLoader_s0_k == _XLoader_s0_i;\u000A    int _21 = _A_extent_1 >> 10;\u000A    bool _22 = _XLoader_s0_i < _21;\u000A    bool _23 = _18 || _22;\u000A    if (_23)\u000A    {\u000A     float _24;\u000A     int _25 = _A_extent_1 >> 10;\u000A     bool _26 = _XLoader_s0_i < _25;\u000A     if (_26)\u000A     {\u000A      int _27 = _XLoader_s0_kk + _XLoader_s0_k*1024;\u000A      float _32 = _XSerializer_mem_channel[_27];\u000A      _24 = _32;\u000A     } // if _26\u000A     else\u000A     {\u000A      float _33 = float_from_bits(0 /* 0 */);\u000A      _24 = _33;\u000A     } // if _26 else\u000A     float _34 = _24;\u000A     write_channel_intel(_XLoader_channel, _34);\u000A     (void)_34;\u000A    } // if _23\u000A   } // for _XLoader_s0_kk\u000A  } // for _XLoader_s0_k\u000A } // for _XLoader_s0_i\u000A} // kernel kernel_XLoader\u000A#undef __address_space__XSerializer_mem_channel\u000A// Address spaces for kernel_XFeeder\u000A__attribute__((max_global_work_dim(0)))\u000A__attribute__((autorun))\u000A__kernel void kernel_XFeeder(\u000A)\u000A{\u000A int _XFeeder_cycle_temp;\u000A float __attribute__((memory, numbanks(1), singlepump, numwriteports(1), numreadports(1))) _XFeeder_buffer__0_ibuffer[2][1024];\u000A _XFeeder_cycle_temp = 15360;\u000A while(1)\u000A {\u000A  int _37 = _XFeeder_cycle_temp;\u000A  int _38 = _37 & 16383;\u000A  bool _39 = 15360 <= _38;\u000A  if (_39)\u000A  {\u000A   float __40 = read_channel_intel(_XLoader_channel);\u000A   int _41 = _XFeeder_cycle_temp;\u000A   int _42 = _41 >> 14;\u000A   int _43 = _42 & 1;\u000A   bool _44 = (bool)(_43);\u000A   int _45 = _41 & 16383;\u000A   int _46 = _45 & 1023;\u000A   _XFeeder_buffer__0_ibuffer[_44][_46] = __40;\u000A  } // if _39\u000A  int _47 = _XFeeder_cycle_temp;\u000A  bool _48 = 16383 < _47;\u000A  if (_48)\u000A  {\u000A   int _49 = _XFeeder_cycle_temp;\u000A   int _50 = _49 >> 14;\u000A   int _51 = _50 & 1;\u000A   bool _52 = (bool)(_51);\u000A   bool _53 = !(_52);\u000A   int _54 = _49 >> 4;\u000A   int _55 = _54 & 1023;\u000A   float _56 = _XFeeder_buffer__0_ibuffer[_53][_55];\u000A   write_channel_intel(_XFeeder_channel, _56);\u000A   (void)_56;\u000A  } // if _48\u000A  int _57 = _XFeeder_cycle_temp;\u000A  int _58 = _57 + 1;\u000A  _XFeeder_cycle_temp = _58;\u000A } // while _XFeeder_s0_outermost_loop_infinite\u000A} // kernel kernel_XFeeder\u000A// Address spaces for kernel_V\u000A#define __address_space__V __global\u000A__kernel void kernel_V(\u000A const int _A_extent_0,\u000A const int _A_extent_1)\u000A{\u000A _ALoader_channel_array_t _ALoader_channel_array;\u000A _V_channel_array_t _V_channel_array;\u000A // produce uZ\u000A float _uZ_shreg[16][64];\u000A // produce uX\u000A float _uX_shreg;\u000A float _uZ_temp[64];\u000A // produce uA\u000A float _uA_shreg[64];\u000A int _185 = _A_extent_1 >> 10;\u000A for (int _uA_s0_i = 0; _uA_s0_i < 0 + _185; _uA_s0_i++)\u000A {\u000A  int _186 = _A_extent_0 >> 10;\u000A  int _187 = _186 - _uA_s0_i;\u000A  for (int _uA_s0_k = _uA_s0_i; _uA_s0_k < _uA_s0_i + _187; _uA_s0_k++)\u000A  {\u000A   #pragma loop_coalesce 2\u000A   for (int _uA_s0_kk = 0; _uA_s0_kk < 0 + 1024; _uA_s0_kk++)\u000A   {\u000A    for (int _uA_s0_ii = 0; _uA_s0_ii < 0 + 16; _uA_s0_ii++)\u000A    {\u000A     #pragma unroll\u000A     for (int _dummy_s0_iii = 0; _dummy_s0_iii < 0 + 64; _dummy_s0_iii++)\u000A     {\u000A      float _189 = _uZ_shreg[15][_dummy_s0_iii];\u000A      _uZ_temp[_dummy_s0_iii] = _189;\u000A      #pragma unroll\u000A      for (int _dummy__1_s0_l0 = 0; _dummy__1_s0_l0 < 0 + 15; _dummy__1_s0_l0++)\u000A      {\u000A       int _190 = 15 - _dummy__1_s0_l0;\u000A       int _191 = 14 - _dummy__1_s0_l0;\u000A       float _193 = _uZ_shreg[_191][_dummy_s0_iii];\u000A       _uZ_shreg[_190][_dummy_s0_iii] = _193;\u000A       (void)_193;\u000A      } // for _dummy__1_s0_l0\u000A      float _194 = _uZ_temp[_dummy_s0_iii];\u000A      _uZ_shreg[0][_dummy_s0_iii] = _194;\u000A      (void)_194;\u000A     } // for _dummy_s0_iii\u000A     bool _V_channel_temp;\u000A     _V_channel_temp = 0;\u000A     _ALoader_channel_array = read_channel_intel(_ALoader_channel);\u000A     float _XFeeder_channel_array = read_channel_intel(_XFeeder_channel);\u000A     #pragma unroll\u000A     for (int _uA_s0_iii = 0; _uA_s0_iii < 0 + 64; _uA_s0_iii++)\u000A     {\u000A      float __196 = _ALoader_channel_array.s[_uA_s0_iii];\u000A      _uA_shreg[_uA_s0_iii] = __196;\u000A      (void)__196;\u000A      float _197;\u000A      bool _198 = _uA_s0_iii == 0;\u000A      if (_198)\u000A      {\u000A       float __199 = _XFeeder_channel_array;\u000A       _197 = __199;\u000A      } // if _198\u000A      else\u000A      {\u000A       float _201 = _uX_shreg;\u000A       _197 = _201;\u000A      } // if _198 else\u000A      float _202 = _197;\u000A      _uX_shreg = _202;\u000A      (void)_202;\u000A      float _204 = _uX_shreg;\u000A      float _205 = __fpga_reg(__fpga_reg(_204));\u000A      _uX_shreg = _205;\u000A      (void)_205;\u000A      float _206;\u000A      bool _207 = _uA_s0_kk == 0;\u000A      bool _208 = _uA_s0_k == _uA_s0_i;\u000A      bool _209 = _207 && _208;\u000A      if (_209)\u000A      {\u000A       float _210 = float_from_bits(0 /* 0 */);\u000A       _206 = _210;\u000A      } // if _209\u000A      else\u000A      {\u000A       float _212 = _uZ_shreg[0][_uA_s0_iii];\u000A       _206 = _212;\u000A      } // if _209 else\u000A      float _213 = _206;\u000A      float _215 = _uA_shreg[_uA_s0_iii];\u000A      float _217 = _uX_shreg;\u000A      float _218 = _215 * _217;\u000A      float _219 = _213 + _218;\u000A      _uZ_shreg[0][_uA_s0_iii] = _219;\u000A      (void)_219;\u000A      bool _220 = _uA_s0_kk == 1023;\u000A      int _221 = _A_extent_0 >> 10;\u000A      int _222 = _221 + -1;\u000A      bool _223 = _uA_s0_k == _222;\u000A      bool _224 = _220 && _223;\u000A      if (_224)\u000A      {\u000A       float _226 = _uZ_shreg[0][_uA_s0_iii];\u000A       _V_channel_array.s[_uA_s0_iii] = _226;\u000A       _V_channel_temp = 1;\u000A      } // if _224\u000A     } // for _uA_s0_iii\u000A     bool _163 = _V_channel_temp;\u000A     if (_163)\u000A     {\u000A      write_channel_intel(_V_channel, _V_channel_array);\u000A      (void)_V_channel_array;\u000A     } // if _163\u000A    } // for _uA_s0_ii\u000A   } // for _uA_s0_kk\u000A  } // for _uA_s0_k\u000A } // for _uA_s0_i\u000A} // kernel kernel_V\u000A#undef __address_space__V\u000A#define __address_space__unloader_mem_channel __global\u000A__kernel void kernel_unloader(\u000A const int _A_extent_1,\u000A __address_space__unloader_mem_channel float *restrict _unloader_mem_channel)\u000A{\u000A _V_channel_array_t _V_channel_array;\u000A int _addr_temp;\u000A _addr_temp = 0;\u000A int _164 = _A_extent_1 >> 10;\u000A for (int _unloader_s0_i = 0; _unloader_s0_i < 0 + _164; _unloader_s0_i++)\u000A {\u000A  for (int _unloader_s0_ii = 0; _unloader_s0_ii < 0 + 16; _unloader_s0_ii++)\u000A  {\u000A   _V_channel_array_t __165 = read_channel_intel(_V_channel);\u000A   _V_channel_array = __165;\u000A   #pragma unroll\u000A   for (int _unloader_s0_iii = 0; _unloader_s0_iii < 0 + 64; _unloader_s0_iii++)\u000A   {\u000A    float __166 = _V_channel_array.s[_unloader_s0_iii];\u000A    int _167 = _addr_temp;\u000A    _unloader_mem_channel[_167] = __166;\u000A    int _168 = _addr_temp;\u000A    int _169 = _168 + 1;\u000A    _addr_temp = _169;\u000A   } // for _unloader_s0_iii\u000A  } // for _unloader_s0_ii\u000A } // for _unloader_s0_i\u000A} // kernel kernel_unloader\u000A#undef __address_space__unloader_mem_channel\u000A\u000A// Address spaces for kernel_XLoader_T\u000A#define __address_space__XSerializer_T_mem_channel __global\u000A__kernel void kernel_XLoader_T(\u000A const int _A_extent_0,\u000A __address_space__XSerializer_T_mem_channel const float *restrict _XSerializer_T_mem_channel)\u000A{\u000A int _343 = _A_extent_0 >> 10;\u000A int _344 = _343 + 1;\u000A for (int _XLoader_T_s0_k = 0; _XLoader_T_s0_k < 0 + _344; _XLoader_T_s0_k++)\u000A {\u000A  int _345 = _A_extent_0 >> 10;\u000A  int _346 = _345 - _XLoader_T_s0_k + ((_XLoader_T_s0_k < _343) ? 0 : 1);\u000A  for (int _XLoader_T_s0_i = _XLoader_T_s0_k; _XLoader_T_s0_i < _XLoader_T_s0_k + _346; _XLoader_T_s0_i++)\u000A  {\u000A   for (int _XLoader_T_s0_kk = 0; _XLoader_T_s0_kk < 0 + 1024; _XLoader_T_s0_kk++)\u000A   {\u000A    bool _347 = _XLoader_T_s0_i == _XLoader_T_s0_k;\u000A    int _350 = _A_extent_0 >> 10;\u000A    bool _351 = _XLoader_T_s0_k < _350;\u000A    bool _352 = _347 || _351;\u000A    if (_352)\u000A    {\u000A     float _354;\u000A     int _355 = _A_extent_0 >> 10;\u000A     bool _356 = _XLoader_T_s0_k < _355;\u000A     if (_356)\u000A     {\u000A      int _196 = _XLoader_T_s0_kk + _XLoader_T_s0_k*1024;\u000A      float _364 = _XSerializer_T_mem_channel[_196];\u000A      _354 = _364;\u000A     } // if _356\u000A     else\u000A     {\u000A      float _365 = float_from_bits(0 /* 0 */);\u000A      _354 = _365;\u000A     } // if _356 else\u000A     float _366 = _354;\u000A     write_channel_intel(_XLoader_T_channel, _366);\u000A     (void)_366;\u000A    } // if _352\u000A   } // for _XLoader_T_s0_kk\u000A  } // for _XLoader_T_s0_i\u000A } // for _XLoader_T_s0_k\u000A} // kernel kernel_XLoader_T\u000A#undef __address_space__XSerializer_T_mem_channel\u000A// Address spaces for kernel_AFeeder_T\u000A__attribute__((max_global_work_dim(0)))\u000A__attribute__((autorun))\u000A__kernel void kernel_AFeeder_T(\u000A)\u000A{\u000A _AFeeder_T_channel_array_t _AFeeder_T_channel_array;\u000A _ALoader_channel_array_t __attribute__((register)) _AFeeder_T_value_shreg;\u000A uint _AFeeder_T_time_stamp_shreg;\u000A _ALoader_channel_array_t __attribute__((register)) _AFeeder_T_in_v_temp;\u000A uint _AFeeder_T_cycle_temp;\u000A float __attribute__((memory, numbanks(64), singlepump, numwriteports(1), numreadports(1))) _AFeeder_T_DB_0_ibuffer[2][1024][1024];\u000A _AFeeder_T_cycle_temp = 0;\u000A while(1)\u000A {\u000A  _ALoader_channel_array_t __attribute__((register)) _temp;\u000A  _AFeeder_T_in_v_temp = read_channel_intel(_ALoader_T_channel);;\u000A  #pragma unroll\u000A  for (int _AFeeder_T_s0_buf = 0; _AFeeder_T_s0_buf < 0 + 64; _AFeeder_T_s0_buf++)\u000A  {\u000A   bool _264 = _AFeeder_T_s0_buf == 0;\u000A   if (_264)\u000A   {\u000A    _AFeeder_T_value_shreg = _AFeeder_T_in_v_temp;\u000A    _AFeeder_T_time_stamp_shreg = _AFeeder_T_cycle_temp;\u000A   } // if _264\u000A   else\u000A   {\u000A    _AFeeder_T_value_shreg= _AFeeder_T_value_shreg;\u000A    _AFeeder_T_time_stamp_shreg = _AFeeder_T_time_stamp_shreg;\u000A   } // if _264 else\u000A   _AFeeder_T_value_shreg = __fpga_reg(__fpga_reg(_AFeeder_T_value_shreg));\u000A   _AFeeder_T_time_stamp_shreg = __fpga_reg(__fpga_reg(_AFeeder_T_time_stamp_shreg));\u000A\u000A   uint _288 = _AFeeder_T_time_stamp_shreg;\u000A   uint _290 = _288 >> 14;\u000A   uint _292 = _290 & 1;\u000A   bool _293 = (bool)(_292);\u000A   uint _296 = _288 & 16383;\u000A   int _i = (_296 & 15) << 6;\u000A   int _k = (_296 >> 4);\u000A   unsigned _idx = (_AFeeder_T_s0_buf + 64 - (_k & 63)) & 63;\u000A   _AFeeder_T_DB_0_ibuffer[_293][_k][_i + _AFeeder_T_s0_buf] = _AFeeder_T_value_shreg.s[_idx];\u000A\u000A   int _312 = _AFeeder_T_time_stamp_shreg;\u000A   bool _313 = 16383 < _312;\u000A   if (_313)\u000A   {\u000A    uint _315 = _AFeeder_T_time_stamp_shreg;\u000A    uint _320 = _315 >> 14;\u000A    uint _322 = _320 & 1;\u000A    bool _323 = (bool)(_322);\u000A    bool _324 = !(_323);\u000A    int _325 = _315 & 16383;\u000A    int _i = (_325 & 15) << 6;\u000A    int _k = (_325 >> 4);\u000A    int _base = (_k >> 6) << 6;\u000A    unsigned _idx = (_AFeeder_T_s0_buf + 64 - (_k & 63)) & 63;\u000A    _temp.s[_AFeeder_T_s0_buf] = _AFeeder_T_DB_0_ibuffer[_324][_i + _idx][_base + _AFeeder_T_s0_buf];\u000A   } // if _313\u000A  } // for _AFeeder_T_s0_buf\u000A  _AFeeder_T_channel_array_t __attribute__((register)) _out;\u000A  int _315 = _AFeeder_T_time_stamp_shreg;\u000A  int _325 = _315 & 16383;\u000A  int _k = (_325 >> 4);\u000A  #pragma unroll\u000A  for (int _t = 0; _t < 64; _t++) {\u000A    unsigned _idx = (_t + (_k & 63)) & 63;\u000A    _out.s[_t] = _temp.s[_idx];\u000A  }\u000A  if (16383 < _315)\u000A  {\u000A   write_channel_intel(_AFeeder_T_channel, _out);\u000A  } // if _339\u000A  uint _340 = _AFeeder_T_cycle_temp;\u000A  uint _342 = _340 + 1;\u000A  _AFeeder_T_cycle_temp = _342;\u000A } // while _AFeeder_T_s0_outermost_loop_infinite\u000A} // kernel kernel_AFeeder_T\u000A// Address spaces for kernel_XFeeder_T\u000A__attribute__((max_global_work_dim(0)))\u000A__attribute__((autorun))\u000A__kernel void kernel_XFeeder_T(\u000A)\u000A{\u000A int _XFeeder_T_cycle_temp;\u000A float __attribute__((memory, numbanks(1), singlepump, numwriteports(1), numreadports(1))) _XFeeder_T_buffer__0_ibuffer[2][1024];\u000A _XFeeder_T_cycle_temp = 15360;\u000A while(1)\u000A {\u000A  int _369 = _XFeeder_T_cycle_temp;\u000A  int _370 = _369 & 16383;\u000A  bool _371 = 15360 <= _370;\u000A  if (_371)\u000A  {\u000A   float __372 = read_channel_intel(_XLoader_T_channel);\u000A   int _373 = _XFeeder_T_cycle_temp;\u000A   int _374 = _373 >> 14;\u000A   int _375 = _374 & 1;\u000A   bool _376 = (bool)(_375);\u000A   int _377 = _373 & 16383;\u000A   int _378 = _377 & 1023;\u000A   _XFeeder_T_buffer__0_ibuffer[_376][_378] = __372;\u000A  } // if _371\u000A  int _379 = _XFeeder_T_cycle_temp;\u000A  bool _380 = 16383 < _379;\u000A  if (_380)\u000A  {\u000A   int _381 = _XFeeder_T_cycle_temp;\u000A   int _382 = _381 >> 14;\u000A   int _383 = _382 & 1;\u000A   bool _384 = (bool)(_383);\u000A   bool _385 = !(_384);\u000A   int _386 = _381 >> 4;\u000A   int _387 = _386 & 1023;\u000A   float _388 = _XFeeder_T_buffer__0_ibuffer[_385][_387];\u000A   write_channel_intel(_XFeeder_T_channel, _388);\u000A   (void)_388;\u000A  } // if _380\u000A  int _389 = _XFeeder_T_cycle_temp;\u000A  int _390 = _389 + 1;\u000A  _XFeeder_T_cycle_temp = _390;\u000A } // while _XFeeder_T_s0_outermost_loop_infinite\u000A} // kernel kernel_XFeeder_T\u000A// Address spaces for kernel_V_T\u000A#define __address_space__V_T __global\u000A__kernel void kernel_V_T(\u000A const int _A_extent_0)\u000A{\u000A _AFeeder_T_channel_array_t _AFeeder_T_channel_array;\u000A _V_channel_array_t _V_channel_array;\u000A // produce uZ_T\u000A float _uZ_T_shreg[16][64];\u000A // produce uX_T\u000A float _uX_T_shreg;\u000A float _uZ_T_temp[64];\u000A float _uZ_temp[64];\u000A // produce uA_T\u000A float _uA_T_shreg[64];\u000A int _517 = _A_extent_0 >> 10;\u000A for (int _uA_T_s0_k = 0; _uA_T_s0_k < 0 + _517; _uA_T_s0_k++)\u000A {\u000A  int _518 = _A_extent_0 >> 10;\u000A  int _519 = _518 - _uA_T_s0_k;\u000A  for (int _uA_T_s0_i = _uA_T_s0_k; _uA_T_s0_i < _uA_T_s0_k + _519; _uA_T_s0_i++)\u000A  {\u000A   #pragma loop_coalesce 2\u000A   for (int _uA_T_s0_kk = 0; _uA_T_s0_kk < 0 + 1024; _uA_T_s0_kk++)\u000A   {\u000A    for (int _uA_T_s0_ii = 0; _uA_T_s0_ii < 0 + 16; _uA_T_s0_ii++)\u000A    {\u000A     #pragma unroll\u000A     for (int _dummy__2_s0_iii = 0; _dummy__2_s0_iii < 0 + 64; _dummy__2_s0_iii++)\u000A     {\u000A      float _521 = _uZ_T_shreg[15][_dummy__2_s0_iii];\u000A      _uZ_T_temp[_dummy__2_s0_iii] = _521;\u000A      #pragma unroll\u000A      for (int _dummy__3_s0_l0 = 0; _dummy__3_s0_l0 < 0 + 15; _dummy__3_s0_l0++)\u000A      {\u000A       int _522 = 15 - _dummy__3_s0_l0;\u000A       int _523 = 14 - _dummy__3_s0_l0;\u000A       float _525 = _uZ_T_shreg[_523][_dummy__2_s0_iii];\u000A       _uZ_T_shreg[_522][_dummy__2_s0_iii] = _525;\u000A       (void)_525;\u000A      } // for _dummy__3_s0_l0\u000A      float _526 = _uZ_T_temp[_dummy__2_s0_iii];\u000A      _uZ_T_shreg[0][_dummy__2_s0_iii] = _526;\u000A      (void)_526;\u000A     } // for _dummy__2_s0_iii\u000A     bool _V_channel_temp;\u000A     _V_channel_temp = 0;\u000A     _AFeeder_T_channel_array = read_channel_intel(_AFeeder_T_channel);\u000A     float _XFeeder_T_channel_array = read_channel_intel(_XFeeder_T_channel);\u000A     #pragma unroll\u000A     for (int _uA_T_s0_iii = 0; _uA_T_s0_iii < 0 + 64; _uA_T_s0_iii++)\u000A     {\u000A      float __528 = _AFeeder_T_channel_array.s[_uA_T_s0_iii];\u000A      _uA_T_shreg[_uA_T_s0_iii] = __528;\u000A      (void)__528;\u000A      float _529;\u000A      bool _530 = _uA_T_s0_iii == 0;\u000A      if (_530)\u000A      {\u000A       float __531 = _XFeeder_T_channel_array;\u000A       _529 = __531;\u000A      } // if _530\u000A      else\u000A      {\u000A       float _533 = _uX_T_shreg;\u000A       _529 = _533;\u000A      } // if _530 else\u000A      float _534 = _529;\u000A      _uX_T_shreg = _534;\u000A      (void)_534;\u000A      float _536 = _uX_T_shreg;\u000A      float _537 = __fpga_reg(__fpga_reg(_536));\u000A      _uX_T_shreg = _537;\u000A      (void)_537;\u000A      float _538;\u000A      bool _539 = _uA_T_s0_kk == 0;\u000A      if (_539)\u000A      {\u000A       float _540 = float_from_bits(0 /* 0 */);\u000A       _538 = _540;\u000A      } // if _539\u000A      else\u000A      {\u000A       float _542 = _uZ_T_shreg[0][_uA_T_s0_iii];\u000A       _538 = _542;\u000A      } // if _539 else\u000A      float _543 = _538;\u000A      float _545 = _uA_T_shreg[_uA_T_s0_iii];\u000A      float _547 = _uX_T_shreg;\u000A      float _548 = _545 * _547;\u000A      float _549 = _543 + _548;\u000A      _uZ_T_shreg[0][_uA_T_s0_iii] = _549;\u000A      (void)_549;\u000A      bool _550 = _uA_T_s0_kk == 1023;\u000A      if (_550)\u000A      {\u000A       float _552 = _uZ_T_shreg[0][_uA_T_s0_iii];\u000A       _V_channel_array.s[_uA_T_s0_iii] = _552;\u000A       _V_channel_temp = 1;\u000A      } // if _550\u000A     } // for _uA_T_s0_iii\u000A     bool _163 = _V_channel_temp;\u000A     if (_163)\u000A     {\u000A      write_channel_intel(_V_T_channel, _V_channel_array);\u000A      (void)_V_channel_array;\u000A     } // if _163\u000A    } // for _uA_T_s0_ii\u000A   } // for _uA_T_s0_kk\u000A  } // for _uA_T_s0_i\u000A } // for _uA_T_s0_k\u000A} // kernel kernel_V_T\u000A#undef __address_space__V_T\u000A// Address spaces for kernel_unloader\u000A#define __address_space__unloader_mem_channel __global\u000A__kernel void kernel_unloader_T(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A __address_space__unloader_mem_channel float *restrict _unloader_mem_channel)\u000A{\u000A _V_channel_array_t _V_channel_array;\u000A int _addr_temp;\u000A _addr_temp = 0;\u000A int _163 = _A_extent_0 >> 10;\u000A for (int _unloader_s0_k = 0; _unloader_s0_k < _163; _unloader_s0_k++)\u000A {\u000A  int _164 = _A_extent_1 >> 10;\u000A  for (int _unloader_s0_i = _unloader_s0_k; _unloader_s0_i < 0 + _164; _unloader_s0_i++)\u000A  {\u000A   for (int _unloader_s0_ii = 0; _unloader_s0_ii < 0 + 16; _unloader_s0_ii++)\u000A   {\u000A    _V_channel_array_t __165 = read_channel_intel(_V_T_channel);\u000A    _V_channel_array = __165;\u000A    #pragma unroll\u000A    for (int _unloader_s0_iii = 0; _unloader_s0_iii < 0 + 64; _unloader_s0_iii++)\u000A    {\u000A     float __166 = _V_channel_array.s[_unloader_s0_iii];\u000A     int _167 = _addr_temp;\u000A     _unloader_mem_channel[_167] = __166;\u000A     int _168 = _addr_temp;\u000A     int _169 = _168 + 1;\u000A     _addr_temp = _169;\u000A    } // for _unloader_s0_iii\u000A   } // for _unloader_s0_ii\u000A  } // for _unloader_s0_i\u000A } // for _unloader_s0_k\u000A} // kernel kernel_unloader\u000A#undef __address_space__unloader_mem_channel\u000A"}]