[{"path":"/home/u146242/gbmv_lab/s10_3/a.cl", "name":"a.cl", "has_active_debug_locs":false, "absName":"/home/u146242/gbmv_lab/s10_3/a.cl", "content":"/*OpenCL C x86-64-linux-avx-avx2-enable_synthesis-f16c-fma-intel_fpga-opencl-sse41*/\u000A#pragma OPENCL FP_CONTRACT ON\u000A#define float_from_bits(x) as_float(x)\u000Ainline float nan_f32() { return NAN; }\u000Ainline float neg_inf_f32() { return -INFINITY; }\u000Ainline float inf_f32() { return INFINITY; }\u000Ainline bool is_nan_f32(float x) {return isnan(x); }\u000Ainline bool is_inf_f32(float x) {return isinf(x); }\u000Ainline bool is_finite_f32(float x) {return isfinite(x); }\u000A#define sqrt_f32 sqrt \u000A#define sin_f32 sin \u000A#define cos_f32 cos \u000A#define exp_f32 exp \u000A#define log_f32 log \u000A#define abs_f32 fabs \u000A#define floor_f32 floor \u000A#define ceil_f32 ceil \u000A#define round_f32 round \u000A#define trunc_f32 trunc \u000A#define pow_f32 pow\u000A#define asin_f32 asin \u000A#define acos_f32 acos \u000A#define tan_f32 tan \u000A#define atan_f32 atan \u000A#define atan2_f32 atan2\u000A#define sinh_f32 sinh \u000A#define asinh_f32 asinh \u000A#define cosh_f32 cosh \u000A#define acosh_f32 acosh \u000A#define tanh_f32 tanh \u000A#define atanh_f32 atanh \u000A#define fast_inverse_f32 native_recip \u000A#define fast_inverse_sqrt_f32 native_rsqrt \u000A#define __address_space___shared __local\u000A\u000A\u000A// ll suffix in OpenCL is reserved for 128-bit integers.\u000A#if defined __OPENCL_VERSION__\u000A#define ADD_INT64_T_SUFFIX(x) x##l\u000A#define ADD_UINT64_T_SUFFIX(x) x##ul\u000A// HLSL doesn't have any suffixes.\u000A#elif defined HLSL_VERSION\u000A#define ADD_INT64_T_SUFFIX(x) x\u000A#define ADD_UINT64_T_SUFFIX(x) x\u000A#else\u000A#define ADD_INT64_T_SUFFIX(x) x##ll\u000A#define ADD_UINT64_T_SUFFIX(x) x##ull\u000A#endif\u000A#pragma OPENCL EXTENSION cl_intel_channels : enable\u000Atypedef union { \u000A    float s[64]; \u000A    float16 v[4];\u000A} _aLoader_channel_array_t;\u000Achannel _aLoader_channel_array_t _aLoader_channel __attribute__((depth(256))) ;\u000Achannel float _xLoader_channel __attribute__((depth(256))) ;\u000Achannel float _xFeeder_channel __attribute__((depth(256))) ;\u000Atypedef struct { float s; } _V_1_channel_array_t;\u000Achannel _V_1_channel_array_t _V_1_channel __attribute__((depth(256))) ;\u000Atypedef struct { float s[64]; } _V_2_channel_array_t;\u000Achannel _V_2_channel_array_t _V_2_channel __attribute__((depth(256))) ;\u000A// Address spaces for kernel_aLoader\u000A#define __address_space__A_serializer __global\u000A__kernel void kernel_aLoader(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A __address_space__A_serializer const float *restrict _A_serializer_1,\u000A __address_space__A_serializer const float *restrict _A_serializer_2,\u000A __address_space__A_serializer const float *restrict _A_serializer_3,\u000A __address_space__A_serializer const float *restrict _A_serializer_4)\u000A{\u000A int _addr_temp = 0;\u000A _aLoader_channel_array_t _aLoader_channel_array;\u000A int _0 = _A_extent_1 >> 12;\u000A for (int _aLoader_s0_i = 0; _aLoader_s0_i < 0 + _0; _aLoader_s0_i++)\u000A {\u000A  int _1 = _A_extent_0 >> 13;\u000A  for (int _aLoader_s0_k = 0; _aLoader_s0_k < 0 + _1; _aLoader_s0_k++)\u000A  {\u000A   for (int _aLoader_s0_kk = 0; _aLoader_s0_kk < 0 + 8192; _aLoader_s0_kk++)\u000A   {\u000A    for (int _aLoader_s0_ii = 0; _aLoader_s0_ii < 0 + 64; _aLoader_s0_ii++)\u000A    {\u000A     int _2 = _addr_temp * 16;\u000A     _aLoader_channel_array.v[0] = vload16(0, (__address_space__A_serializer float*)(_A_serializer_1 + _2));\u000A     _aLoader_channel_array.v[1] = vload16(0, (__address_space__A_serializer float*)(_A_serializer_2 + _2));\u000A     _aLoader_channel_array.v[2] = vload16(0, (__address_space__A_serializer float*)(_A_serializer_3 + _2));\u000A     _aLoader_channel_array.v[3] = vload16(0, (__address_space__A_serializer float*)(_A_serializer_4 + _2));\u000A     write_channel_intel(_aLoader_channel, _aLoader_channel_array);\u000A     (void)_aLoader_channel_array;\u000A     _addr_temp += 1;\u000A    } // for _aLoader_s0_ii\u000A   } // for _aLoader_s0_kk\u000A  } // for _aLoader_s0_k\u000A } // for _aLoader_s0_i\u000A} // kernel kernel_aLoader\u000A#undef __address_space__A_serializer\u000A// Address spaces for kernel_xLoader\u000A#define __address_space__X_serializer_mem_channel __global\u000A__kernel void kernel_xLoader(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A __address_space__X_serializer_mem_channel const float *restrict _X_serializer_mem_channel)\u000A{\u000A int _addr_temp;\u000A _addr_temp = 0;\u000A int _13 = _A_extent_1 >> 12;\u000A int _14 = _13 + 1;\u000A for (int _xLoader_s0_i = 0; _xLoader_s0_i < 0 + _14; _xLoader_s0_i++)\u000A {\u000A  int _15 = _A_extent_0 >> 13;\u000A  for (int _xLoader_s0_k = 0; _xLoader_s0_k < 0 + _15; _xLoader_s0_k++)\u000A  {\u000A   for (int _xLoader_s0_kk = 0; _xLoader_s0_kk < 0 + 8192; _xLoader_s0_kk++)\u000A   {\u000A    bool _16 = _xLoader_s0_k == 0;\u000A    int _19 = _A_extent_1 >> 12;\u000A    bool _20 = _xLoader_s0_i < _19;\u000A    bool _21 = _16 || _20;\u000A    if (_21)\u000A    {\u000A     float _22;\u000A     int _23 = _A_extent_1 >> 12;\u000A     bool _24 = _xLoader_s0_i < _23;\u000A     if (_24)\u000A     {\u000A      int _25 = _xLoader_s0_kk + 8192*_xLoader_s0_k;\u000A      float _29 = _X_serializer_mem_channel[_25];\u000A      _22 = _29;\u000A     } // if _24\u000A     else\u000A     {\u000A      float _30 = float_from_bits(0 /* 0 */);\u000A      _22 = _30;\u000A     } // if _24 else\u000A     float _31 = _22;\u000A     write_channel_intel(_xLoader_channel, _31);\u000A     (void)_31;\u000A    } // if _21\u000A    int _32 = _addr_temp;\u000A    int _33 = _32 + 1;\u000A    _addr_temp = _33;\u000A   } // for _xLoader_s0_kk\u000A  } // for _xLoader_s0_k\u000A } // for _xLoader_s0_i\u000A} // kernel kernel_xLoader\u000A#undef __address_space__X_serializer_mem_channel\u000A// Address spaces for kernel_xFeeder\u000A__attribute__((max_global_work_dim(0)))\u000A__attribute__((autorun))\u000A__kernel void kernel_xFeeder(\u000A)\u000A{\u000A int _xFeeder_cycle_temp;\u000A float __attribute__((memory, numbanks(1), singlepump, numwriteports(1), numreadports(1))) _xFeeder_buffer__0_ibuffer[2][8192];\u000A _xFeeder_cycle_temp = 516096;\u000A while(1)\u000A {\u000A  int _34 = _xFeeder_cycle_temp;\u000A  int _35 = _34 & 524287;\u000A  bool _36 = 516096 <= _35;\u000A  if (_36)\u000A  {\u000A   float __37 = read_channel_intel(_xLoader_channel);\u000A   int _38 = _xFeeder_cycle_temp;\u000A   int _39 = _38 >> 19;\u000A   int _40 = _39 & 1;\u000A   bool _41 = (bool)(_40);\u000A   int _42 = _38 & 524287;\u000A   int _43 = _42 & 8191;\u000A   _xFeeder_buffer__0_ibuffer[_41][_43] = __37;\u000A  } // if _36\u000A  int _44 = _xFeeder_cycle_temp;\u000A  bool _45 = 524287 < _44;\u000A  if (_45)\u000A  {\u000A   int _46 = _xFeeder_cycle_temp;\u000A   int _47 = _46 >> 19;\u000A   int _48 = _47 & 1;\u000A   bool _49 = (bool)(_48);\u000A   bool _50 = !(_49);\u000A   int _51 = _46 >> 6;\u000A   int _52 = _51 & 8191;\u000A   float _53 = _xFeeder_buffer__0_ibuffer[_50][_52];\u000A   write_channel_intel(_xFeeder_channel, _53);\u000A   (void)_53;\u000A  } // if _45\u000A  int _54 = _xFeeder_cycle_temp;\u000A  int _55 = _54 + 1;\u000A  _xFeeder_cycle_temp = _55;\u000A } // while _xFeeder_s0_outermost_loop_infinite\u000A} // kernel kernel_xFeeder\u000A// Address spaces for kernel_V_1\u000A__kernel void kernel_V_1(\u000A const int _A_extent_0,\u000A const int _A_extent_1)\u000A{\u000A _aLoader_channel_array_t _aLoader_channel_array;\u000A _V_1_channel_array_t _V_1_channel_array;\u000A _V_2_channel_array_t _V_2_channel_array;\u000A // produce uZ\u000A float _uZ_shreg[65][64];\u000A // produce uX\u000A float _uX_shreg;\u000A // produce uA\u000A float _uA_shreg[64];\u000A int _182 = _A_extent_1 >> 12;\u000A for (int _uA_s0_i = 0; _uA_s0_i < 0 + _182; _uA_s0_i++)\u000A {\u000A  int _183 = _A_extent_0 >> 13;\u000A  for (int _uA_s0_k = 0; _uA_s0_k < 0 + _183; _uA_s0_k++)\u000A  {\u000A   #pragma loop_coalesce 2\u000A   for (int _uA_s0_kk = 0; _uA_s0_kk < 0 + 8192; _uA_s0_kk++)\u000A   {\u000A    for (int _uA_s0_ii = 0; _uA_s0_ii < 0 + 64; _uA_s0_ii++)\u000A    {\u000A     #pragma unroll\u000A     for (int _dummy_s0_iii = 0; _dummy_s0_iii < 0 + 64; _dummy_s0_iii++)\u000A     {\u000A      #pragma unroll\u000A      for (int _dummy__1_s0_l0 = 0; _dummy__1_s0_l0 < 0 + 64; _dummy__1_s0_l0++)\u000A      {\u000A       int _184 = 64 - _dummy__1_s0_l0;\u000A       int _185 = 63 - _dummy__1_s0_l0;\u000A       float _187 = _uZ_shreg[_185][_dummy_s0_iii];\u000A       _uZ_shreg[_184][_dummy_s0_iii] = _187;\u000A       (void)_187;\u000A      } // for _dummy__1_s0_l0\u000A     } // for _dummy_s0_iii\u000A     _aLoader_channel_array_t __188 = read_channel_intel(_aLoader_channel);\u000A     _aLoader_channel_array = __188;\u000A     float _xFeeder_channel_array = read_channel_intel(_xFeeder_channel);\u000A     #pragma unroll\u000A     for (int _uA_s0_iii = 0; _uA_s0_iii < 0 + 64; _uA_s0_iii++)\u000A     {\u000A      float __189 = _aLoader_channel_array.s[_uA_s0_iii];\u000A      _uA_shreg[_uA_s0_iii] = __189;\u000A      (void)__189;\u000A      float _190;\u000A      bool _191 = _uA_s0_iii == 0;\u000A      if (_191)\u000A      {\u000A       float __192 = _xFeeder_channel_array;\u000A       _190 = __192;\u000A      } // if _191\u000A      else\u000A      {\u000A       float _194 = _uX_shreg;\u000A       _190 = _194;\u000A      } // if _191 else\u000A      float _195 = _190;\u000A      _uX_shreg = _195;\u000A      (void)_195;\u000A      float _197 = _uX_shreg;\u000A      float _198 = __fpga_reg(__fpga_reg(_197));\u000A      _uX_shreg = _198;\u000A      (void)_198;\u000A      bool _199 = _uA_s0_iii == 63;\u000A      float _200;\u000A      bool _201 = _uA_s0_ii == 63;\u000A      bool _202 = _201 && _199;\u000A      bool _203 = _uA_s0_kk == 0;\u000A      bool _204 = _202 || _203;\u000A      if (_204)\u000A      {\u000A       float _205 = float_from_bits(0 /* 0 */);\u000A       _200 = _205;\u000A      } // if _204\u000A      else\u000A      {\u000A       float _206;\u000A       if (_199)\u000A       {\u000A        int _207 = _uA_s0_iii + -63;\u000A        float _209 = _uZ_shreg[63][_207];\u000A        _206 = _209;\u000A       } // if _199\u000A       else\u000A       {\u000A        int _210 = _uA_s0_iii + 1;\u000A        float _212 = _uZ_shreg[64][_210];\u000A        _206 = _212;\u000A       } // if _199 else\u000A       float _213 = _206;\u000A       _200 = _213;\u000A      } // if _204 else\u000A      float _214 = _200;\u000A      float _216 = _uA_shreg[_uA_s0_iii];\u000A      float _218 = _uX_shreg;\u000A      float _219 = _216 * _218;\u000A      float _220 = _214 + _219;\u000A      _uZ_shreg[0][_uA_s0_iii] = _220;\u000A      (void)_220;\u000A      bool _221 = _uA_s0_iii == 0;\u000A      bool _222 = _uA_s0_ii == 0;\u000A      bool _223 = _221 && _222;\u000A      if (_223)\u000A      {\u000A       float _225 = _uZ_shreg[0][0];\u000A       _V_1_channel_array.s = _225;\u000A       (void)_225;\u000A      } // if _223\u000A      bool _162 = _uA_s0_kk == 8191;\u000A      if (_162)\u000A      {\u000A       float _163 = _uZ_shreg[0][_uA_s0_iii];\u000A       _V_2_channel_array.s[_uA_s0_iii] = _163;\u000A      }\u000A     } // for _uA_s0_iii\u000A     if (_uA_s0_kk == 8191)\u000A     {\u000A      write_channel_intel(_V_2_channel, _V_2_channel_array);\u000A     }\u000A    } // for _uA_s0_ii\u000A    write_channel_intel(_V_1_channel, _V_1_channel_array);\u000A    (void)_V_1_channel_array;\u000A   } // for _uA_s0_kk\u000A  } // for _uA_s0_k\u000A } // for _uA_s0_i\u000A} // kernel kernel_V_1\u000A// Address spaces for kernel_unloader_1\u000A#define __address_space__unloader_1_mem_channel __global\u000A__kernel void kernel_unloader_1(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A __address_space__unloader_1_mem_channel float *restrict _unloader_1_mem_channel)\u000A{\u000A _V_1_channel_array_t _V_1_channel_array;\u000A int _addr_temp;\u000A _addr_temp = 0;\u000A int _226 = _A_extent_1 >> 12;\u000A for (int _unloader_1_s0_i = 0; _unloader_1_s0_i < 0 + _226; _unloader_1_s0_i++)\u000A {\u000A  int _227 = _A_extent_0 >> 13;\u000A  for (int _unloader_1_s0_k = 0; _unloader_1_s0_k < 0 + _227; _unloader_1_s0_k++)\u000A  {\u000A   for (int _unloader_1_s0_kk = 0; _unloader_1_s0_kk < 0 + 8192; _unloader_1_s0_kk++)\u000A   {\u000A    _V_1_channel_array_t __228 = read_channel_intel(_V_1_channel);\u000A    _V_1_channel_array = __228;\u000A    (void)__228;\u000A    int _229 = _addr_temp;\u000A    _unloader_1_mem_channel[_229] = _V_1_channel_array.s;\u000A    int _230 = _addr_temp;\u000A    int _231 = _230 + 1;\u000A    _addr_temp = _231;\u000A   } // for _unloader_1_s0_kk\u000A  } // for _unloader_1_s0_k\u000A } // for _unloader_1_s0_i\u000A} // kernel kernel_unloader_1\u000A#undef __address_space__unloader_1_mem_channel\u000A\u000A#define __address_space__unloader_2_mem_channel __global\u000A__kernel void kernel_unloader_2(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A __address_space__unloader_2_mem_channel float *restrict _unloader_2_mem_channel)\u000A{\u000A _V_2_channel_array_t _V_2_channel_array;\u000A int _addr_temp;\u000A _addr_temp = 0;\u000A int _162 = _A_extent_1 >> 12;\u000A for (int _unloader_1_s0_i = 0; _unloader_1_s0_i < 0 + _162; _unloader_1_s0_i++)\u000A {\u000A  int _163 = _A_extent_0 >> 13;\u000A  for (int _unloader_1_s0_k = 0; _unloader_1_s0_k < 0 + _163; _unloader_1_s0_k++)\u000A  {\u000A   for (int _unloader_1_s0_ii = 0; _unloader_1_s0_ii < 0 + 64; _unloader_1_s0_ii++)\u000A   {\u000A    _V_2_channel_array_t __164 = read_channel_intel(_V_2_channel);\u000A    _V_2_channel_array = __164;\u000A    #pragma unroll\u000A    for (int _unloader_1_s0_iii = 0; _unloader_1_s0_iii < 0 + 64; _unloader_1_s0_iii++)\u000A    {\u000A     int _165 = _addr_temp;\u000A     _unloader_2_mem_channel[_165] = _V_2_channel_array.s[_unloader_1_s0_iii];\u000A     int _166 = _addr_temp;\u000A     int _167 = _166 + 1;\u000A     _addr_temp = _167;\u000A    } // for _unloader_1_s0_iii\u000A   } // for _unloader_1_s0_kk\u000A  } // for _unloader_1_s0_k\u000A } // for _unloader_1_s0_i\u000A} // kernel kernel_unloader_1\u000A#undef __address_space__unloader_2_mem_channel\u000A"}]