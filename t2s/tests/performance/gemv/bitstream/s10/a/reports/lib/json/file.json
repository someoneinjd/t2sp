[{"path":"/home/u146242/gemv_lab/s10_3/a.cl", "name":"a.cl", "has_active_debug_locs":false, "absName":"/home/u146242/gemv_lab/s10_3/a.cl", "content":"/*OpenCL C x86-64-linux-avx-avx2-enable_synthesis-f16c-fma-intel_fpga-opencl-sse41*/\u000A#pragma OPENCL FP_CONTRACT ON\u000A#define float_from_bits(x) as_float(x)\u000Ainline float nan_f32() { return NAN; }\u000Ainline float neg_inf_f32() { return -INFINITY; }\u000Ainline float inf_f32() { return INFINITY; }\u000Ainline bool is_nan_f32(float x) {return isnan(x); }\u000Ainline bool is_inf_f32(float x) {return isinf(x); }\u000Ainline bool is_finite_f32(float x) {return isfinite(x); }\u000A#define sqrt_f32 sqrt \u000A#define sin_f32 sin \u000A#define cos_f32 cos \u000A#define exp_f32 exp \u000A#define log_f32 log \u000A#define abs_f32 fabs \u000A#define floor_f32 floor \u000A#define ceil_f32 ceil \u000A#define round_f32 round \u000A#define trunc_f32 trunc \u000A#define pow_f32 pow\u000A#define asin_f32 asin \u000A#define acos_f32 acos \u000A#define tan_f32 tan \u000A#define atan_f32 atan \u000A#define atan2_f32 atan2\u000A#define sinh_f32 sinh \u000A#define asinh_f32 asinh \u000A#define cosh_f32 cosh \u000A#define acosh_f32 acosh \u000A#define tanh_f32 tanh \u000A#define atanh_f32 atanh \u000A#define fast_inverse_f32 native_recip \u000A#define fast_inverse_sqrt_f32 native_rsqrt \u000A#define __address_space___shared __local\u000A\u000A\u000A// ll suffix in OpenCL is reserved for 128-bit integers.\u000A#if defined __OPENCL_VERSION__\u000A#define ADD_INT64_T_SUFFIX(x) x##l\u000A#define ADD_UINT64_T_SUFFIX(x) x##ul\u000A// HLSL doesn't have any suffixes.\u000A#elif defined HLSL_VERSION\u000A#define ADD_INT64_T_SUFFIX(x) x\u000A#define ADD_UINT64_T_SUFFIX(x) x\u000A#else\u000A#define ADD_INT64_T_SUFFIX(x) x##ll\u000A#define ADD_UINT64_T_SUFFIX(x) x##ull\u000A#endif\u000A#pragma OPENCL EXTENSION cl_intel_channels : enable\u000Atypedef union {\u000Afloat16 v[4];\u000Afloat s[64];\u000A} _aLoader_channel_array_t;\u000Achannel _aLoader_channel_array_t _aLoader_channel __attribute__((depth(256))) ;\u000Achannel float _xLoader_channel __attribute__((depth(256))) ;\u000Achannel float _xFeeder_channel __attribute__((depth(256))) ;\u000Atypedef struct { float s[64]; } _V_channel_array_t;\u000Achannel _V_channel_array_t _V_channel __attribute__((depth(256))) ;\u000A// Address spaces for kernel_aLoader\u000A#define __address_space__A_serializer __global\u000A__kernel void kernel_aLoader(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A __address_space__A_serializer const float *restrict _A_serializer_1,\u000A __address_space__A_serializer const float *restrict _A_serializer_2,\u000A __address_space__A_serializer const float *restrict _A_serializer_3,\u000A __address_space__A_serializer const float *restrict _A_serializer_4)\u000A{\u000A int _addr_temp = 0;\u000A int _0 = _A_extent_1 >> 11;\u000A for (int _aLoader_s0_i = 0; _aLoader_s0_i < 0 + _0; _aLoader_s0_i++)\u000A {\u000A  int _1 = _A_extent_0 >> 5;\u000A  for (int _aLoader_s0_k = 0; _aLoader_s0_k < 0 + _1; _aLoader_s0_k++)\u000A  {\u000A   for (int _aLoader_s0_kk_ii = 0; _aLoader_s0_kk_ii < 0 + 1024; _aLoader_s0_kk_ii++)\u000A   {\u000A    int _1 = _addr_temp;\u000A    int _2 = _1 * 16;\u000A    _aLoader_channel_array_t _temp;\u000A    _temp.v[0] = vload16(0, (__address_space__A_serializer float*)(_A_serializer_1 + _2));\u000A    _temp.v[1] = vload16(0, (__address_space__A_serializer float*)(_A_serializer_2 + _2));\u000A    _temp.v[2] = vload16(0, (__address_space__A_serializer float*)(_A_serializer_3 + _2));\u000A    _temp.v[3] = vload16(0, (__address_space__A_serializer float*)(_A_serializer_4 + _2));\u000A    write_channel_intel(_aLoader_channel, _temp);\u000A    _addr_temp += 1;\u000A   } // for _aLoader_s0_kk_ii\u000A  } // for _aLoader_s0_k\u000A } // for _aLoader_s0_i\u000A} // kernel kernel_aLoader\u000A#undef __address_space__A_serializer\u000A// Address spaces for kernel_xLoader\u000A#define __address_space__X_serializer_mem_channel __global\u000A__kernel void kernel_xLoader(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A __address_space__X_serializer_mem_channel const float *restrict _X_serializer_mem_channel)\u000A{\u000A int _addr_temp;\u000A _addr_temp = 0;\u000A int _15 = _A_extent_1 >> 11;\u000A for (int _xLoader_s0_i = 0; _xLoader_s0_i < 0 + _15; _xLoader_s0_i++)\u000A {\u000A  int _16 = _A_extent_0 >> 5;\u000A  for (int _xLoader_s0_k = 0; _xLoader_s0_k < 0 + _16; _xLoader_s0_k++)\u000A  {\u000A   for (int _xLoader_s0_kk = 0; _xLoader_s0_kk < 0 + 32; _xLoader_s0_kk++)\u000A   {\u000A    int _17 = _addr_temp;\u000A    int _18 = _A_extent_0 >> 5;\u000A    int _19 = _18 * 32;\u000A    int _20 = _17 % _19;\u000A    float _21 = _X_serializer_mem_channel[_20];\u000A    write_channel_intel(_xLoader_channel, _21);\u000A    (void)_21;\u000A    int _22 = _17 + 1;\u000A    _addr_temp = _22;\u000A   } // for _xLoader_s0_kk\u000A  } // for _xLoader_s0_k\u000A } // for _xLoader_s0_i\u000A} // kernel kernel_xLoader\u000A#undef __address_space__X_serializer_mem_channel\u000A// Address spaces for kernel_xFeeder\u000A__kernel void kernel_xFeeder(\u000A const int _A_extent_0,\u000A const int _A_extent_1)\u000A{\u000A int _23 = _A_extent_1 >> 11;\u000A int _24 = _A_extent_0 >> 5;\u000A int _25 = _23 * _24;\u000A int _xFeeder_cycle_temp;\u000A float __attribute__((memory, numbanks(32), singlepump, numwriteports(1), numreadports(1))) _xFeeder_buffer__0_ibuffer[2][32];\u000A _xFeeder_cycle_temp = 992;\u000A int _26 = _A_extent_1 >> 11;\u000A int _27 = _A_extent_0 >> 5;\u000A int _28 = _26 * _27;\u000A int _29 = _28 * 1024;\u000A int _30 = _29 + 1024;\u000A for (int _xFeeder_s0_outermost_loop = 0; _xFeeder_s0_outermost_loop < 0 + _30; _xFeeder_s0_outermost_loop++)\u000A {\u000A  int _31 = _xFeeder_cycle_temp;\u000A  int _32 = _31 & 1023;\u000A  bool _33 = 992 <= _32;\u000A  int _34 = _31 >> 10;\u000A  bool _35 = _34 < _25;\u000A  bool _36 = _33 && _35;\u000A  if (_36)\u000A  {\u000A   float __37 = read_channel_intel(_xLoader_channel);\u000A   int _38 = _xFeeder_cycle_temp;\u000A   int _39 = _38 >> 10;\u000A   int _40 = _39 & 1;\u000A   bool _41 = (bool)(_40);\u000A   int _42 = _38 & 1023;\u000A   int _43 = _42 & 31;\u000A   _xFeeder_buffer__0_ibuffer[_41][_43] = __37;\u000A  } // if _36\u000A  int _44 = _xFeeder_cycle_temp;\u000A  int _45 = _44 >> 10;\u000A  bool _46 = _45 <= _25;\u000A  bool _47 = 1023 < _44;\u000A  bool _48 = _46 && _47;\u000A  if (_48)\u000A  {\u000A   int _49 = _xFeeder_cycle_temp;\u000A   int _50 = _49 >> 10;\u000A   int _51 = _50 & 1;\u000A   bool _52 = (bool)(_51);\u000A   bool _53 = !(_52);\u000A   int _54 = _49 >> 5;\u000A   int _55 = _54 & 31;\u000A   float _56 = _xFeeder_buffer__0_ibuffer[_53][_55];\u000A   write_channel_intel(_xFeeder_channel, _56);\u000A   (void)_56;\u000A  } // if _48\u000A  int _60 = _xFeeder_cycle_temp;\u000A  int _61 = _60 + 1;\u000A  _xFeeder_cycle_temp = _61;\u000A } // for _xFeeder_s0_outermost_loop\u000A} // kernel kernel_xFeeder\u000A// Address spaces for kernel_V\u000A__kernel void kernel_V(\u000A const int _A_extent_0,\u000A const int _A_extent_1)\u000A{\u000A _aLoader_channel_array_t _aLoader_channel_array;\u000A _V_channel_array_t _V_channel_array;\u000A // produce uZ\u000A float _uZ_shreg[32][64];\u000A // produce uX\u000A float _uX_shreg;\u000A float _uZ_temp[64];\u000A // produce uA\u000A float _uA_shreg[64];\u000A int _377 = _A_extent_1 >> 11;\u000A for (int _uA_s0_i = 0; _uA_s0_i < 0 + _377; _uA_s0_i++)\u000A {\u000A  int _378 = _A_extent_0 >> 5;\u000A  for (int _uA_s0_k = 0; _uA_s0_k < 0 + _378; _uA_s0_k++)\u000A  {\u000A   for (int _uA_s0_kk_ii = 0; _uA_s0_kk_ii < 0 + 1024; _uA_s0_kk_ii++)\u000A   {\u000A    #pragma unroll\u000A    for (int _dummy_s0_iii = 0; _dummy_s0_iii < 0 + 64; _dummy_s0_iii++)\u000A    {\u000A     float _380 = _uZ_shreg[31][_dummy_s0_iii];\u000A     _uZ_temp[_dummy_s0_iii] = _380;\u000A     #pragma unroll\u000A     for (int _dummy__1_s0_l0 = 0; _dummy__1_s0_l0 < 0 + 31; _dummy__1_s0_l0++)\u000A     {\u000A      int _381 = 31 - _dummy__1_s0_l0;\u000A      int _382 = 30 - _dummy__1_s0_l0;\u000A      float _384 = _uZ_shreg[_382][_dummy_s0_iii];\u000A      _uZ_shreg[_381][_dummy_s0_iii] = _384;\u000A      (void)_384;\u000A     } // for _dummy__1_s0_l0\u000A     float _385 = _uZ_temp[_dummy_s0_iii];\u000A     _uZ_shreg[0][_dummy_s0_iii] = _385;\u000A     (void)_385;\u000A    } // for _dummy_s0_iii\u000A    bool _V_channel_temp;\u000A    _V_channel_temp = 0;\u000A    _aLoader_channel_array = read_channel_intel(_aLoader_channel);\u000A    float _xFeeder_channel_array = read_channel_intel(_xFeeder_channel);\u000A    #pragma unroll\u000A    for (int _uA_s0_iii = 0; _uA_s0_iii < 0 + 64; _uA_s0_iii++)\u000A    {\u000A     float __387 = _aLoader_channel_array.s[_uA_s0_iii];\u000A     _uA_shreg[_uA_s0_iii] = __387;\u000A     (void)__387;\u000A     float _388;\u000A     bool _389 = _uA_s0_iii == 0;\u000A     if (_389)\u000A     {\u000A      float __390 = _xFeeder_channel_array;\u000A      _388 = __390;\u000A     } // if _389\u000A     else\u000A     {\u000A      float _392 = _uX_shreg;\u000A      _388 = _392;\u000A     } // if _389 else\u000A     float _393 = _388;\u000A     _uX_shreg = _393;\u000A     (void)_393;\u000A     float _395 = _uX_shreg;\u000A     float _396 = __fpga_reg(__fpga_reg(_395));\u000A     _uX_shreg = _396;\u000A     (void)_396;\u000A     float _397;\u000A     int _398 = _uA_s0_kk_ii >> 5;\u000A     bool _399 = _398 == 0;\u000A     bool _400 = _uA_s0_k == 0;\u000A     bool _401 = _399 && _400;\u000A     if (_401)\u000A     {\u000A      float _402 = float_from_bits(0 /* 0 */);\u000A      _397 = _402;\u000A     } // if _401\u000A     else\u000A     {\u000A      float _404 = _uZ_shreg[0][_uA_s0_iii];\u000A      _397 = _404;\u000A     } // if _401 else\u000A     float _405 = _397;\u000A     float _407 = _uA_shreg[_uA_s0_iii];\u000A     float _409 = _uX_shreg;\u000A     float _410 = _407 * _409;\u000A     float _411 = _405 + _410;\u000A     _uZ_shreg[0][_uA_s0_iii] = _411;\u000A     (void)_411;\u000A     int _412 = _uA_s0_kk_ii >> 5;\u000A     bool _413 = _412 == 31;\u000A     int _414 = _A_extent_0 >> 5;\u000A     int _415 = _414 + -1;\u000A     bool _416 = _uA_s0_k == _415;\u000A     bool _417 = _413 && _416;\u000A     if (_417)\u000A     {\u000A      float _419 = _uZ_shreg[0][_uA_s0_iii];\u000A      _V_channel_array.s[_uA_s0_iii] = _419;\u000A      (void)_uA_s0_iii;\u000A      _V_channel_temp = 1;\u000A     } // if _417\u000A    } // for _uA_s0_iii\u000A    bool _420 = _V_channel_temp;\u000A    if (_420)\u000A    {\u000A     write_channel_intel(_V_channel, _V_channel_array);\u000A     (void)_V_channel_array;\u000A    } // if _420\u000A   } // for _uA_s0_kk_ii\u000A  } // for _uA_s0_k\u000A } // for _uA_s0_i\u000A} // kernel kernel_V\u000A// Address spaces for kernel_unloader\u000A#define __address_space__unloader_mem_channel __global\u000A__kernel void kernel_unloader(\u000A const int _A_extent_1,\u000A __address_space__unloader_mem_channel float *restrict _unloader_mem_channel)\u000A{\u000A _V_channel_array_t _V_channel_array;\u000A int _addr_temp;\u000A _addr_temp = 0;\u000A int _421 = _A_extent_1 >> 11;\u000A for (int _unloader_s0_i = 0; _unloader_s0_i < 0 + _421; _unloader_s0_i++)\u000A {\u000A  for (int _unloader_s0_ii = 0; _unloader_s0_ii < 0 + 32; _unloader_s0_ii++)\u000A  {\u000A   _V_channel_array_t __422 = read_channel_intel(_V_channel);\u000A   _V_channel_array = __422;\u000A   for (int _unloader_s0_iii = 0; _unloader_s0_iii < 0 + 64; _unloader_s0_iii++)\u000A   {\u000A    float __423 = _V_channel_array.s[_unloader_s0_iii];\u000A    int _424 = _addr_temp;\u000A    _unloader_mem_channel[_424] = __423;\u000A    int _425 = _addr_temp;\u000A    int _426 = _425 + 1;\u000A    _addr_temp = _426;\u000A   } // for _unloader_s0_iii\u000A  } // for _unloader_s0_ii\u000A } // for _unloader_s0_i\u000A} // kernel kernel_unloader\u000A#undef __address_space__unloader_mem_channel\u000A\u000A"}]