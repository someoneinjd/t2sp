[{"path":"/home/u146242/trmm_lab/s10/a.cl", "name":"a.cl", "has_active_debug_locs":false, "absName":"/home/u146242/trmm_lab/s10/a.cl", "content":"/*OpenCL C x86-64-linux-avx-avx2-enable_synthesis-f16c-fma-intel_fpga-opencl-sse41*/\u000A#pragma OPENCL FP_CONTRACT ON\u000A#define float_from_bits(x) as_float(x)\u000Ainline float nan_f32() { return NAN; }\u000Ainline float neg_inf_f32() { return -INFINITY; }\u000Ainline float inf_f32() { return INFINITY; }\u000Ainline bool is_nan_f32(float x) {return isnan(x); }\u000Ainline bool is_inf_f32(float x) {return isinf(x); }\u000Ainline bool is_finite_f32(float x) {return isfinite(x); }\u000A#define sqrt_f32 sqrt \u000A#define sin_f32 sin \u000A#define cos_f32 cos \u000A#define exp_f32 exp \u000A#define log_f32 log \u000A#define abs_f32 fabs \u000A#define floor_f32 floor \u000A#define ceil_f32 ceil \u000A#define round_f32 round \u000A#define trunc_f32 trunc \u000A#define pow_f32 pow\u000A#define asin_f32 asin \u000A#define acos_f32 acos \u000A#define tan_f32 tan \u000A#define atan_f32 atan \u000A#define atan2_f32 atan2\u000A#define sinh_f32 sinh \u000A#define asinh_f32 asinh \u000A#define cosh_f32 cosh \u000A#define acosh_f32 acosh \u000A#define tanh_f32 tanh \u000A#define atanh_f32 atanh \u000A#define fast_inverse_f32 native_recip \u000A#define fast_inverse_sqrt_f32 native_rsqrt \u000A#define __address_space___shared __local\u000A\u000A\u000A// ll suffix in OpenCL is reserved for 128-bit integers.\u000A#if defined __OPENCL_VERSION__\u000A#define ADD_INT64_T_SUFFIX(x) x##l\u000A#define ADD_UINT64_T_SUFFIX(x) x##ul\u000A// HLSL doesn't have any suffixes.\u000A#elif defined HLSL_VERSION\u000A#define ADD_INT64_T_SUFFIX(x) x\u000A#define ADD_UINT64_T_SUFFIX(x) x\u000A#else\u000A#define ADD_INT64_T_SUFFIX(x) x##ll\u000A#define ADD_UINT64_T_SUFFIX(x) x##ull\u000A#endif\u000A#pragma OPENCL EXTENSION cl_intel_channels : enable\u000Atypedef union {\u000Abool __attribute__ ((aligned(16))) s[16];\u000Astruct {bool s0,  s1,  s2,  s3,  s4,  s5,  s6,  s7,  s8,  s9,  sa,  sb,  sc,  sd,  se,  sf;};\u000A} bool16;\u000Atypedef union {\u000Abool __attribute__ ((aligned(8))) s[8];\u000Astruct {bool s0,  s1,  s2,  s3,  s4,  s5,  s6,  s7;};\u000A} bool8;\u000Achannel float16 _ALoader_channel __attribute__((depth(256))) ;\u000Atypedef struct { float16 s[16]; } _AFeeder_channel_array_t;\u000Achannel _AFeeder_channel_array_t _AFeeder_channel __attribute__((depth(256))) ;\u000Achannel float16 _BLoader_channel __attribute__((depth(256))) ;\u000Atypedef struct { float16 s[8]; } _BFeeder_channel_array_t;\u000Achannel _BFeeder_channel_array_t _BFeeder_channel __attribute__((depth(256))) ;\u000Achannel float8 _Out_channel __attribute__((depth(256))) ;\u000A// Address spaces for kernel_ALoader\u000A#define __address_space__ASerializer_mem_channel __global\u000A__kernel void kernel_ALoader(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A const int _B_extent_0,\u000A __address_space__ASerializer_mem_channel const float *restrict _ASerializer_mem_channel)\u000A{\u000A int _0 = _A_extent_1 >> 8;\u000A int _1 = _0 + 1;\u000A for (int _ALoader_s0_i = 0; _ALoader_s0_i < 0 + _1; _ALoader_s0_i++)\u000A {\u000A  int _2 = _B_extent_0 >> 8;\u000A  for (int _ALoader_s0_j = 0; _ALoader_s0_j < 0 + _2; _ALoader_s0_j++)\u000A  {\u000A   int _3 = _A_extent_0 >> 8;\u000A   int _4 = _3 - _ALoader_s0_i + ((_ALoader_s0_i < _0) ? 0 : 1);\u000A   for (int _ALoader_s0_k = _ALoader_s0_i; _ALoader_s0_k < _ALoader_s0_i + _4; _ALoader_s0_k++)\u000A   {\u000A    #pragma loop_coalesce 3\u000A    for (int _ALoader_s0_kk = 0; _ALoader_s0_kk < 0 + 16; _ALoader_s0_kk++)\u000A    {\u000A     for (int _ALoader_s0_ii = 0; _ALoader_s0_ii < 0 + 16; _ALoader_s0_ii++)\u000A     {\u000A      for (int _ALoader_s0_iii = 0; _ALoader_s0_iii < 0 + 16; _ALoader_s0_iii++)\u000A      {\u000A       bool _5 = _ALoader_s0_j == 0;\u000A       bool _6 = _ALoader_s0_k == _ALoader_s0_i;\u000A       bool _7 = _5 && _6;\u000A       int _8 = _A_extent_1 >> 8;\u000A       bool _9 = _ALoader_s0_i < _8;\u000A       bool _10 = _7 || _9;\u000A       if (_10)\u000A       {\u000A        float16 _12;\u000A        int _13 = _A_extent_1 >> 8;\u000A        bool _14 = _ALoader_s0_i < _13;\u000A        if (_14)\u000A        {\u000A         int _18 = _ALoader_s0_iii*16 + _ALoader_s0_ii*256 + _ALoader_s0_kk*4096;\u000A         int _19 = _18 + _ALoader_s0_k*65536;\u000A         int _20 = _19 + _ALoader_s0_i*65536*_3;\u000A         float16 _27 = vload16(0, (__address_space__ASerializer_mem_channel float*)_ASerializer_mem_channel + _20);\u000A         _12 = _27;\u000A        } // if _14\u000A        else\u000A        {\u000A         float _28 = float_from_bits(0 /* 0 */);\u000A         float16 _29 = _28;\u000A         _12 = _29;\u000A        } // if _14 else\u000A        float16 _30 = _12;\u000A        write_channel_intel(_ALoader_channel, _30);\u000A        (void)_30;\u000A       } // if _10\u000A      } // for _ALoader_s0_iii\u000A     } // for _ALoader_s0_ii\u000A    } // for _ALoader_s0_kk\u000A   } // for _ALoader_s0_k\u000A  } // for _ALoader_s0_j\u000A } // for _ALoader_s0_i\u000A} // kernel kernel_ALoader\u000A#undef __address_space__ASerializer_mem_channel\u000A// Address spaces for kernel_AFeeder\u000A__attribute__((max_global_work_dim(0)))\u000A__attribute__((autorun))\u000A__kernel void kernel_AFeeder(\u000A)\u000A{\u000A _AFeeder_channel_array_t _AFeeder_channel_array;\u000A float16 _AFeeder_value_shreg;\u000A uint _AFeeder_time_stamp_shreg;\u000A float16 _AFeeder_in_v_temp;\u000A uint _AFeeder_cycle_temp;\u000A float16 __attribute__((memory, numbanks(16), singlepump, numwriteports(1), numreadports(1))) _AFeeder_DB_0_ibuffer[2][16][16][16];\u000A #pragma unroll\u000A for (int _AFeeder_s0_jjj_init = 0; _AFeeder_s0_jjj_init < 0 + 8; _AFeeder_s0_jjj_init++)\u000A {\u000A  bool _33 = _AFeeder_s0_jjj_init == 0;\u000A  if (_33)\u000A  {\u000A   uint _34 = (uint)(ADD_UINT64_T_SUFFIX(4096));\u000A   _AFeeder_cycle_temp = _34;\u000A  } // if _33\u000A } // for _AFeeder_s0_jjj_init\u000A while(1)\u000A {\u000A  uint _35 = (uint)(ADD_UINT64_T_SUFFIX(4096));\u000A  uint _36 = _AFeeder_cycle_temp;\u000A  uint _37 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A  uint _38 = _36 & _37;\u000A  bool _39 = _35 <= _38;\u000A  if (_39)\u000A  {\u000A   float16 __40 = read_channel_intel(_ALoader_channel);\u000A   _AFeeder_in_v_temp = __40;\u000A  } // if _39\u000A  #pragma unroll\u000A  for (int _AFeeder_s0_buf = 0; _AFeeder_s0_buf < 0 + 16; _AFeeder_s0_buf++)\u000A  {\u000A   bool _41 = _AFeeder_s0_buf == 0;\u000A   if (_41)\u000A   {\u000A    float16 _42 = _AFeeder_in_v_temp;\u000A    _AFeeder_value_shreg = _42;\u000A    (void)_42;\u000A    uint _43 = _AFeeder_cycle_temp;\u000A    _AFeeder_time_stamp_shreg = _43;\u000A    (void)_43;\u000A   } // if _41\u000A   else\u000A   {\u000A    float16 _45 = _AFeeder_value_shreg;\u000A    _AFeeder_value_shreg = _45;\u000A    (void)_45;\u000A    uint _47 = _AFeeder_time_stamp_shreg;\u000A    _AFeeder_time_stamp_shreg = _47;\u000A    (void)_47;\u000A   } // if _41 else\u000A   float16 _49 = _AFeeder_value_shreg;\u000A   float16 _50 = __fpga_reg(__fpga_reg(_49));\u000A   _AFeeder_value_shreg = _50;\u000A   (void)_50;\u000A   uint _52 = _AFeeder_time_stamp_shreg;\u000A   uint _53 = __fpga_reg(__fpga_reg(_52));\u000A   _AFeeder_time_stamp_shreg = _53;\u000A   (void)_53;\u000A   uint _54 = (uint)(ADD_UINT64_T_SUFFIX(4096));\u000A   uint _56 = _AFeeder_time_stamp_shreg;\u000A   uint _57 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A   uint _58 = _56 & _57;\u000A   bool _59 = _54 <= _58;\u000A   if (_59)\u000A   {\u000A    uint _61 = _AFeeder_time_stamp_shreg;\u000A    uint _62 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A    uint _63 = _61 & _62;\u000A    uint _64 = (uint)(ADD_UINT64_T_SUFFIX(4096));\u000A    uint _65 = _63 - _64;\u000A    uint _66 = (uint)(ADD_UINT64_T_SUFFIX(15));\u000A    uint _67 = _65 & _66;\u000A    int _68 = (int)(_67);\u000A    bool _69 = _AFeeder_s0_buf == _68;\u000A    if (_69)\u000A    {\u000A     float16 _71 = _AFeeder_value_shreg;\u000A     uint _73 = _AFeeder_time_stamp_shreg;\u000A     uint _74 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A     uint _75 = _73 >> _74;\u000A     uint _76 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A     uint _77 = _75 & _76;\u000A     bool _78 = (bool)(_77);\u000A     uint _80 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A     uint _81 = _73 & _80;\u000A     uint _82 = (uint)(ADD_UINT64_T_SUFFIX(4096));\u000A     uint _83 = _81 - _82;\u000A     int _84 = (int)(_83);\u000A     int _85 = _84 >> 8;\u000A     int _87 = _84 >> 4;\u000A     int _88 = _87 & 15;\u000A     _AFeeder_DB_0_ibuffer[_78][_85][_88][_AFeeder_s0_buf] = _71;\u000A    } // if _69\u000A   } // if _59\u000A   uint _89 = (uint)(ADD_UINT64_T_SUFFIX(0));\u000A   uint _91 = _AFeeder_time_stamp_shreg;\u000A   uint _92 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A   uint _93 = _91 >> _92;\u000A   bool _94 = _89 < _93;\u000A   if (_94)\u000A   {\u000A    uint _96 = _AFeeder_time_stamp_shreg;\u000A    uint _97 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A    uint _98 = _96 & _97;\u000A    int _99 = (int)(_98);\u000A    uint _100 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A    uint _101 = _96 >> _100;\u000A    uint _102 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A    uint _103 = _101 & _102;\u000A    bool _104 = (bool)(_103);\u000A    bool _105 = !(_104);\u000A    int _106 = _99 >> 9;\u000A    int _107 = _99 >> 5;\u000A    int _108 = _107 & 15;\u000A    float16 _109 = _AFeeder_DB_0_ibuffer[_105][_106][_108][_AFeeder_s0_buf];\u000A    _AFeeder_channel_array.s[_AFeeder_s0_buf] = _109;\u000A    (void)_AFeeder_s0_buf;\u000A   } // if _94\u000A  } // for _AFeeder_s0_buf\u000A  uint _110 = (uint)(ADD_UINT64_T_SUFFIX(0));\u000A  uint _112 = _AFeeder_time_stamp_shreg;\u000A  uint _113 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A  uint _114 = _112 >> _113;\u000A  bool _115 = _110 < _114;\u000A  if (_115)\u000A  {\u000A   write_channel_intel(_AFeeder_channel, _AFeeder_channel_array);\u000A   (void)_AFeeder_channel_array;\u000A  } // if _115\u000A  uint _116 = _AFeeder_cycle_temp;\u000A  uint _117 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A  uint _118 = _116 + _117;\u000A  _AFeeder_cycle_temp = _118;\u000A } // while _AFeeder_s0_outermost_loop_infinite\u000A} // kernel kernel_AFeeder\u000A// Address spaces for kernel_BLoader\u000A#define __address_space__BSerializer_mem_channel __global\u000A__kernel void kernel_BLoader(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A const int _B_extent_0,\u000A __address_space__BSerializer_mem_channel const float *restrict _BSerializer_mem_channel)\u000A{\u000A int _119 = _A_extent_1 >> 8;\u000A int _120 = _119 + 1;\u000A for (int _BLoader_s0_i = 0; _BLoader_s0_i < 0 + _120; _BLoader_s0_i++)\u000A {\u000A  int _121 = _B_extent_0 >> 8;\u000A  for (int _BLoader_s0_j = 0; _BLoader_s0_j < 0 + _121; _BLoader_s0_j++)\u000A  {\u000A   int _122 = _A_extent_0 >> 8;\u000A   int _123 = _122 - _BLoader_s0_i + ((_BLoader_s0_i < _119) ? 0 : 1);\u000A   for (int _BLoader_s0_k = _BLoader_s0_i; _BLoader_s0_k < _BLoader_s0_i + _123; _BLoader_s0_k++)\u000A   {\u000A    for (int _BLoader_s0_kk = 0; _BLoader_s0_kk < 0 + 16; _BLoader_s0_kk++)\u000A    {\u000A     for (int _BLoader_s0_jj = 0; _BLoader_s0_jj < 0 + 32; _BLoader_s0_jj++)\u000A     {\u000A      for (int _BLoader_s0_jjj = 0; _BLoader_s0_jjj < 0 + 8; _BLoader_s0_jjj++)\u000A      {\u000A       bool _124 = _BLoader_s0_j == 0;\u000A       bool _125 = _BLoader_s0_k == _BLoader_s0_i;\u000A       bool _126 = _124 && _125;\u000A       int _127 = _A_extent_1 >> 8;\u000A       bool _128 = _BLoader_s0_i < _127;\u000A       bool _129 = _126 || _128;\u000A       if (_129)\u000A       {\u000A        float16 _130;\u000A        int _131 = _A_extent_1 >> 8;\u000A        bool _132 = _BLoader_s0_i < _131;\u000A        if (_132)\u000A        {\u000A         int _18 = _BLoader_s0_jjj*16 + _BLoader_s0_jj*128 + _BLoader_s0_kk*4096;\u000A         int _19 = _18 + _BLoader_s0_k*65536;\u000A         int _20 = _19 + _BLoader_s0_j*65536*_122;\u000A         float16 _141 = vload16(0, (__address_space__BSerializer_mem_channel float*)_BSerializer_mem_channel + _20);\u000A         _130 = _141;\u000A        } // if _132\u000A        else\u000A        {\u000A         float _142 = float_from_bits(0 /* 0 */);\u000A         float16 _143 = _142;\u000A         _130 = _143;\u000A        } // if _132 else\u000A        float16 _144 = _130;\u000A        write_channel_intel(_BLoader_channel, _144);\u000A        (void)_144;\u000A       } // if _129\u000A      } // for _BLoader_s0_jjj\u000A     } // for _BLoader_s0_jj\u000A    } // for _BLoader_s0_kk\u000A   } // for _BLoader_s0_k\u000A  } // for _BLoader_s0_j\u000A } // for _BLoader_s0_i\u000A} // kernel kernel_BLoader\u000A#undef __address_space__BSerializer_mem_channel\u000A// Address spaces for kernel_BFeeder\u000A__attribute__((max_global_work_dim(0)))\u000A__attribute__((autorun))\u000A__kernel void kernel_BFeeder(\u000A)\u000A{\u000A _BFeeder_channel_array_t _BFeeder_channel_array;\u000A float16 _BFeeder_value_shreg;\u000A uint _BFeeder_time_stamp_shreg;\u000A float16 _BFeeder_in_v_temp;\u000A uint _BFeeder_cycle_temp;\u000A float16 __attribute__((memory, numbanks(8), singlepump, numwriteports(1), numreadports(1))) _BFeeder_DB_0_ibuffer[2][16][32][8];\u000A #pragma unroll\u000A for (int _BFeeder_s0_iii_init = 0; _BFeeder_s0_iii_init < 0 + 16; _BFeeder_s0_iii_init++)\u000A {\u000A  bool _147 = _BFeeder_s0_iii_init == 0;\u000A  if (_147)\u000A  {\u000A   uint _148 = (uint)(ADD_UINT64_T_SUFFIX(4096));\u000A   _BFeeder_cycle_temp = _148;\u000A  } // if _147\u000A } // for _BFeeder_s0_iii_init\u000A while(1)\u000A {\u000A  uint _149 = (uint)(ADD_UINT64_T_SUFFIX(4096));\u000A  uint _150 = _BFeeder_cycle_temp;\u000A  uint _151 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A  uint _152 = _150 & _151;\u000A  bool _153 = _149 <= _152;\u000A  if (_153)\u000A  {\u000A   float16 __154 = read_channel_intel(_BLoader_channel);\u000A   _BFeeder_in_v_temp = __154;\u000A  } // if _153\u000A  #pragma unroll\u000A  for (int _BFeeder_s0_buf = 0; _BFeeder_s0_buf < 0 + 8; _BFeeder_s0_buf++)\u000A  {\u000A   bool _155 = _BFeeder_s0_buf == 0;\u000A   if (_155)\u000A   {\u000A    float16 _156 = _BFeeder_in_v_temp;\u000A    _BFeeder_value_shreg = _156;\u000A    (void)_156;\u000A    uint _157 = _BFeeder_cycle_temp;\u000A    _BFeeder_time_stamp_shreg = _157;\u000A    (void)_157;\u000A   } // if _155\u000A   else\u000A   {\u000A    float16 _159 = _BFeeder_value_shreg;\u000A    _BFeeder_value_shreg = _159;\u000A    (void)_159;\u000A    uint _161 = _BFeeder_time_stamp_shreg;\u000A    _BFeeder_time_stamp_shreg = _161;\u000A    (void)_161;\u000A   } // if _155 else\u000A   float16 _163 = _BFeeder_value_shreg;\u000A   float16 _164 = __fpga_reg(__fpga_reg(_163));\u000A   _BFeeder_value_shreg = _164;\u000A   (void)_164;\u000A   uint _166 = _BFeeder_time_stamp_shreg;\u000A   uint _167 = __fpga_reg(__fpga_reg(_166));\u000A   _BFeeder_time_stamp_shreg = _167;\u000A   (void)_167;\u000A   uint _168 = (uint)(ADD_UINT64_T_SUFFIX(4096));\u000A   uint _170 = _BFeeder_time_stamp_shreg;\u000A   uint _171 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A   uint _172 = _170 & _171;\u000A   bool _173 = _168 <= _172;\u000A   if (_173)\u000A   {\u000A    uint _175 = _BFeeder_time_stamp_shreg;\u000A    uint _176 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A    uint _177 = _175 & _176;\u000A    uint _178 = (uint)(ADD_UINT64_T_SUFFIX(4096));\u000A    uint _179 = _177 - _178;\u000A    uint _180 = (uint)(ADD_UINT64_T_SUFFIX(7));\u000A    uint _181 = _179 & _180;\u000A    int _182 = (int)(_181);\u000A    bool _183 = _BFeeder_s0_buf == _182;\u000A    if (_183)\u000A    {\u000A     float16 _185 = _BFeeder_value_shreg;\u000A     uint _187 = _BFeeder_time_stamp_shreg;\u000A     uint _188 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A     uint _189 = _187 >> _188;\u000A     uint _190 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A     uint _191 = _189 & _190;\u000A     bool _192 = (bool)(_191);\u000A     uint _194 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A     uint _195 = _187 & _194;\u000A     uint _196 = (uint)(ADD_UINT64_T_SUFFIX(4096));\u000A     uint _197 = _195 - _196;\u000A     int _198 = (int)(_197);\u000A     int _199 = _198 >> 8;\u000A     int _201 = _198 >> 3;\u000A     int _202 = _201 & 31;\u000A     _BFeeder_DB_0_ibuffer[_192][_199][_202][_BFeeder_s0_buf] = _185;\u000A    } // if _183\u000A   } // if _173\u000A   uint _203 = (uint)(ADD_UINT64_T_SUFFIX(0));\u000A   uint _205 = _BFeeder_time_stamp_shreg;\u000A   uint _206 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A   uint _207 = _205 >> _206;\u000A   bool _208 = _203 < _207;\u000A   if (_208)\u000A   {\u000A    uint _210 = _BFeeder_time_stamp_shreg;\u000A    uint _211 = (uint)(ADD_UINT64_T_SUFFIX(8191));\u000A    uint _212 = _210 & _211;\u000A    int _213 = (int)(_212);\u000A    uint _214 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A    uint _215 = _210 >> _214;\u000A    uint _216 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A    uint _217 = _215 & _216;\u000A    bool _218 = (bool)(_217);\u000A    bool _219 = !(_218);\u000A    int _220 = _213 >> 9;\u000A    int _221 = _213 & 31;\u000A    float16 _222 = _BFeeder_DB_0_ibuffer[_219][_220][_221][_BFeeder_s0_buf];\u000A    _BFeeder_channel_array.s[_BFeeder_s0_buf] = _222;\u000A    (void)_BFeeder_s0_buf;\u000A   } // if _208\u000A  } // for _BFeeder_s0_buf\u000A  uint _223 = (uint)(ADD_UINT64_T_SUFFIX(0));\u000A  uint _225 = _BFeeder_time_stamp_shreg;\u000A  uint _226 = (uint)(ADD_UINT64_T_SUFFIX(13));\u000A  uint _227 = _225 >> _226;\u000A  bool _228 = _223 < _227;\u000A  if (_228)\u000A  {\u000A   write_channel_intel(_BFeeder_channel, _BFeeder_channel_array);\u000A   (void)_BFeeder_channel_array;\u000A  } // if _228\u000A  uint _229 = _BFeeder_cycle_temp;\u000A  uint _230 = (uint)(ADD_UINT64_T_SUFFIX(1));\u000A  uint _231 = _229 + _230;\u000A  _BFeeder_cycle_temp = _231;\u000A } // while _BFeeder_s0_outermost_loop_infinite\u000A} // kernel kernel_BFeeder\u000A// Address spaces for kernel_Out\u000A__kernel void kernel_Out(\u000A const int _A_extent_0,\u000A const int _A_extent_1,\u000A const int _B_extent_0)\u000A{\u000A _BFeeder_channel_array_t _BFeeder_channel_array;\u000A _AFeeder_channel_array_t _AFeeder_channel_array;\u000A // produce Z\u000A float _Z_shreg[512][8][16];\u000A float _Z_pipe_shreg[8][7681];\u000A // produce Y\u000A float16 _Y_shreg[8];\u000A float _Z_temp[8][16];\u000A // produce X\u000A float16 _X_shreg[16];\u000A float _Z_shreg_temp;\u000A int _Z_pipe_iter_temp;\u000A int _Z_pipe_base_temp;\u000A _Z_pipe_iter_temp = 8192;\u000A _Z_pipe_base_temp = 0;\u000A int _232 = _A_extent_1 >> 8;\u000A int _233 = _232 + 1;\u000A for (int _X_s0_i = 0; _X_s0_i < 0 + _233; _X_s0_i++)\u000A {\u000A  int _234 = _B_extent_0 >> 8;\u000A  for (int _X_s0_j = 0; _X_s0_j < 0 + _234; _X_s0_j++)\u000A  {\u000A   int _235 = _A_extent_0 >> 8;\u000A   int _236 = _235 - _X_s0_i + ((_X_s0_i < _232) ? 0 : 1);\u000A   for (int _X_s0_k = _X_s0_i; _X_s0_k < _X_s0_i + _236; _X_s0_k++)\u000A   {\u000A    #pragma loop_coalesce 3\u000A    for (int _X_s0_kk = 0; _X_s0_kk < 0 + 16; _X_s0_kk++)\u000A    {\u000A     for (int _X_s0_ii = 0; _X_s0_ii < 0 + 16; _X_s0_ii++)\u000A     {\u000A      for (int _X_s0_jj = 0; _X_s0_jj < 0 + 32; _X_s0_jj++)\u000A      {\u000A       #pragma unroll\u000A       for (int _dummy__1_s0_iii = 0; _dummy__1_s0_iii < 0 + 16; _dummy__1_s0_iii++)\u000A       {\u000A        #pragma unroll\u000A        for (int _dummy_s0_jjj = 0; _dummy_s0_jjj < 0 + 8; _dummy_s0_jjj++)\u000A        {\u000A         float _238 = _Z_shreg[511][_dummy_s0_jjj][_dummy__1_s0_iii];\u000A         _Z_temp[_dummy_s0_jjj][_dummy__1_s0_iii] = _238;\u000A         #pragma unroll\u000A         for (int _dummy__2_s0_l1 = 0; _dummy__2_s0_l1 < 0 + 511; _dummy__2_s0_l1++)\u000A         {\u000A          int _239 = 511 - _dummy__2_s0_l1;\u000A          int _240 = 510 - _dummy__2_s0_l1;\u000A          float _242 = _Z_shreg[_240][_dummy_s0_jjj][_dummy__1_s0_iii];\u000A          _Z_shreg[_239][_dummy_s0_jjj][_dummy__1_s0_iii] = _242;\u000A          (void)_242;\u000A         } // for _dummy__2_s0_l1\u000A         float _243 = _Z_temp[_dummy_s0_jjj][_dummy__1_s0_iii];\u000A         _Z_shreg[0][_dummy_s0_jjj][_dummy__1_s0_iii] = _243;\u000A         (void)_243;\u000A        } // for _dummy_s0_jjj\u000A       } // for _dummy__1_s0_iii\u000A       int _244 = _A_extent_1 >> 8;\u000A       bool _245 = _X_s0_i < _244;\u000A       if (_245)\u000A       {\u000A        _BFeeder_channel_array_t __246 = read_channel_intel(_BFeeder_channel);\u000A        _BFeeder_channel_array = __246;\u000A        (void)__246;\u000A        _AFeeder_channel_array_t __247 = read_channel_intel(_AFeeder_channel);\u000A        _AFeeder_channel_array = __247;\u000A        (void)__247;\u000A       } // if _245\u000A       #pragma unroll\u000A       for (int _X_s0_iii = 0; _X_s0_iii < 0 + 16; _X_s0_iii++)\u000A       {\u000A        #pragma unroll\u000A        for (int _X_s0_jjj = 0; _X_s0_jjj < 0 + 8; _X_s0_jjj++)\u000A        {\u000A         float16 _248;\u000A         bool _249 = _X_s0_jjj == 0;\u000A         if (_249)\u000A         {\u000A          float16 __250 = _AFeeder_channel_array.s[_X_s0_iii];\u000A          _248 = __250;\u000A         } // if _249\u000A         else\u000A         {\u000A          float16 _252 = _X_shreg[_X_s0_iii];\u000A          _248 = _252;\u000A         } // if _249 else\u000A         float16 _253 = _248;\u000A         _X_shreg[_X_s0_iii] = _253;\u000A         (void)_253;\u000A         float16 _255 = _X_shreg[_X_s0_iii];\u000A         float16 _256 = __fpga_reg(__fpga_reg(_255));\u000A         _X_shreg[_X_s0_iii] = _256;\u000A         (void)_256;\u000A         float16 _257;\u000A         bool _258 = _X_s0_iii == 0;\u000A         if (_258)\u000A         {\u000A          float16 __259 = _BFeeder_channel_array.s[_X_s0_jjj];\u000A          _257 = __259;\u000A         } // if _258\u000A         else\u000A         {\u000A          float16 _261 = _Y_shreg[_X_s0_jjj];\u000A          _257 = _261;\u000A         } // if _258 else\u000A         float16 _262 = _257;\u000A         _Y_shreg[_X_s0_jjj] = _262;\u000A         (void)_262;\u000A         float16 _264 = _Y_shreg[_X_s0_jjj];\u000A         float16 _265 = __fpga_reg(__fpga_reg(_264));\u000A         _Y_shreg[_X_s0_jjj] = _265;\u000A         (void)_265;\u000A         float _266;\u000A         bool _267 = _X_s0_k == _X_s0_i;\u000A         bool _268 = _X_s0_kk == 0;\u000A         bool _269 = _267 && _268;\u000A         if (_269)\u000A         {\u000A          float _270 = float_from_bits(0 /* 0 */);\u000A          _266 = _270;\u000A         } // if _269\u000A         else\u000A         {\u000A          float _272 = _Z_shreg[0][_X_s0_jjj][_X_s0_iii];\u000A          float _273 = __fpga_reg(_272);\u000A          _266 = _273;\u000A         } // if _269 else\u000A         float _274 = _266;\u000A         _Z_shreg_temp = _274;\u000A         #pragma unroll\u000A         for (int _X_s0_kkk = 0; _X_s0_kkk < 0 + 16; _X_s0_kkk++)\u000A         {\u000A          float _275 = _Z_shreg_temp;\u000A          float _277 = _X_shreg[_X_s0_iii][_X_s0_kkk];\u000A          float _279 = _Y_shreg[_X_s0_jjj][_X_s0_kkk];\u000A          float _280 = _277 * _279;\u000A          float _281 = _275 + _280;\u000A          _Z_shreg_temp = _281;\u000A          int _282 = _X_s0_kkk & 3;\u000A          bool _283 = _282 == 3;\u000A          if (_283)\u000A          {\u000A           float _284 = _Z_shreg_temp;\u000A           float _285 = __fpga_reg(_284);\u000A           _Z_shreg_temp = _285;\u000A          } // if _283\u000A         } // for _X_s0_kkk\u000A         float _286 = _Z_shreg_temp;\u000A         _Z_shreg[0][_X_s0_jjj][_X_s0_iii] = _286;\u000A         (void)_286;\u000A         #pragma unroll\u000A         for (int _X_s0_kkk = 0; _X_s0_kkk < 0 + 16; _X_s0_kkk++)\u000A         {\u000A          bool _287 = _X_s0_kkk == 15;\u000A          bool _288 = _X_s0_kk == 15;\u000A          bool _289 = _287 && _288;\u000A          int _290 = _A_extent_0 >> 8;\u000A          int _291 = _290 + -1;\u000A          bool _292 = _X_s0_k == _291;\u000A          bool _293 = _289 && _292;\u000A          if (_293)\u000A          {\u000A           int _294 = _X_s0_iii * 512;\u000A           float _296 = _Z_shreg[0][_X_s0_jjj][_X_s0_iii];\u000A           _Z_pipe_shreg[_X_s0_jjj][_294] = _296;\u000A           (void)_296;\u000A          } // if _293\u000A         } // for _X_s0_kkk\u000A        } // for _X_s0_jjj\u000A       } // for _X_s0_iii\u000A       bool _297 = _X_s0_jj == 0;\u000A       bool _298 = _X_s0_ii == 0;\u000A       bool _299 = _297 && _298;\u000A       int _300 = _A_extent_0 >> 8;\u000A       int _301 = _300 + -1;\u000A       bool _302 = _X_s0_k == _301;\u000A       bool _303 = _299 && _302;\u000A       bool _304 = _X_s0_kk == 15;\u000A       bool _305 = _303 && _304;\u000A       int _306 = _A_extent_1 >> 8;\u000A       bool _307 = _X_s0_i < _306;\u000A       bool _308 = _305 && _307;\u000A       if (_308)\u000A       {\u000A        int _309 = _Z_pipe_iter_temp;\u000A        _Z_pipe_base_temp = _309;\u000A       } // if _308\u000A       float8 _Out_channel_temp;\u000A       #pragma unroll\u000A       for (int _Z_pipe_b__62 = 0; _Z_pipe_b__62 < 0 + 8; _Z_pipe_b__62++)\u000A       {\u000A        float _311 = _Z_pipe_shreg[_Z_pipe_b__62][0];\u000A        _Out_channel_temp[_Z_pipe_b__62] = _311;\u000A        #pragma unroll\u000A        for (int _Z_pipe_b__62_dummy = 0; _Z_pipe_b__62_dummy < 0 + 8; _Z_pipe_b__62_dummy++)\u000A        {\u000A         float _312 = _Out_channel_temp[_Z_pipe_b__62_dummy];\u000A         float _313 = __fpga_reg(__fpga_reg(_312));\u000A         _Out_channel_temp[_Z_pipe_b__62_dummy] = _313;\u000A        } // for _Z_pipe_b__62_dummy\u000A       } // for _Z_pipe_b__62\u000A       int _314 = _Z_pipe_iter_temp;\u000A       int _315 = _Z_pipe_base_temp;\u000A       int _316 = _315 + 8192;\u000A       bool _317 = _314 < _316;\u000A       if (_317)\u000A       {\u000A        float8 _318 = _Out_channel_temp;\u000A        write_channel_intel(_Out_channel, _318);\u000A        (void)_318;\u000A       } // if _317\u000A       #pragma unroll\u000A       for (int _Z_pipe_b__63 = 0; _Z_pipe_b__63 < 0 + 8; _Z_pipe_b__63++)\u000A       {\u000A        #pragma unroll\u000A        for (int _Z_pipe_p__31 = 0; _Z_pipe_p__31 < 0 + 15; _Z_pipe_p__31++)\u000A        {\u000A         #pragma unroll\u000A         for (int _Z_pipe_l__31 = 0; _Z_pipe_l__31 < 0 + 511; _Z_pipe_l__31++)\u000A         {\u000A          int _319 = _Z_pipe_p__31 * 512;\u000A          int _320 = _319 + _Z_pipe_l__31;\u000A          int _321 = _320 + 1;\u000A          float _323 = _Z_pipe_shreg[_Z_pipe_b__63][_321];\u000A          _Z_pipe_shreg[_Z_pipe_b__63][_320] = _323;\u000A          (void)_323;\u000A         } // for _Z_pipe_l__31\u000A         int _324 = _Z_pipe_p__31 * 512;\u000A         int _325 = _324 + 511;\u000A         int _326 = _324 + 512;\u000A         float _328 = _Z_pipe_shreg[_Z_pipe_b__63][_326];\u000A         float _329 = __fpga_reg(__fpga_reg(_328));\u000A         _Z_pipe_shreg[_Z_pipe_b__63][_325] = _329;\u000A         (void)_329;\u000A        } // for _Z_pipe_p__31\u000A       } // for _Z_pipe_b__63\u000A       int _330 = _Z_pipe_iter_temp;\u000A       int _331 = _330 + 1;\u000A       _Z_pipe_iter_temp = _331;\u000A      } // for _X_s0_jj\u000A     } // for _X_s0_ii\u000A    } // for _X_s0_kk\u000A   } // for _X_s0_k\u000A  } // for _X_s0_j\u000A } // for _X_s0_i\u000A} // kernel kernel_Out\u000A// Address spaces for kernel_unloader\u000A#define __address_space__unloader_mem_channel __global\u000A__kernel void kernel_unloader(\u000A const int _A_extent_1,\u000A const int _B_extent_0,\u000A __address_space__unloader_mem_channel float *restrict _unloader_mem_channel)\u000A{\u000A int _addr_temp;\u000A _addr_temp = 0;\u000A int _332 = _A_extent_1 >> 8;\u000A for (int _unloader_s0_i = 0; _unloader_s0_i < 0 + _332; _unloader_s0_i++)\u000A {\u000A  int _333 = _B_extent_0 >> 8;\u000A  for (int _unloader_s0_j = 0; _unloader_s0_j < 0 + _333; _unloader_s0_j++)\u000A  {\u000A   #pragma loop_coalesce 3\u000A   for (int _unloader_s0_iii = 0; _unloader_s0_iii < 0 + 16; _unloader_s0_iii++)\u000A   {\u000A    for (int _unloader_s0_ii = 0; _unloader_s0_ii < 0 + 16; _unloader_s0_ii++)\u000A    {\u000A     for (int _unloader_s0_jj = 0; _unloader_s0_jj < 0 + 32; _unloader_s0_jj++)\u000A     {\u000A      float8 __334 = read_channel_intel(_Out_channel);\u000A      int _335 = _addr_temp;\u000A      int _336 = _335 * 8;\u000A      vstore8(__334, 0, (__address_space__unloader_mem_channel float*)_unloader_mem_channel + _336);\u000A      int _337 = _addr_temp;\u000A      int _338 = _337 + 1;\u000A      _addr_temp = _338;\u000A     } // for _unloader_s0_jj\u000A    } // for _unloader_s0_ii\u000A   } // for _unloader_s0_iii\u000A  } // for _unloader_s0_j\u000A } // for _unloader_s0_i\u000A} // kernel kernel_unloader\u000A#undef __address_space__unloader_mem_channel\u000A\u000A"}]